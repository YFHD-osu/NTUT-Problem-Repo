{
  "_comment": "Auto-generated from 015.py and 015.md",
  "title": "15. 判斷迴文",
  "createDate": 1750302596248,
  "problem": [
    "根據輸入的字串N，其中N可能會出現許多符號，請忽略這些符號，只依據數字來判斷是否為迴文，如果是，則將數字N中的重複項刪除(只保留一個)，並由小到大以串列印出。若不是迴文，則將只留下數字N的重複項(只保留一個)，例如222233只留下2跟3各一個，並由大到小以串列印出。",
    "迴文解釋:",
    "如果一個數字按相反的順序重新排列所得到的新的數字，和原先的數字一樣，這個數字稱為「迴文數」",
    "例如:",
    "14641，是一個迴文數 (14641，按相反順序重新排列後，也是14641)",
    "2332，也是一個迴文數 (2332，按相反順序重新排列後，也是2332)",
    "9487，不是一個迴文數 (9487，按相反順序重新排列後，是7849，與原數字不同)",
    "100，也不是一個迴文數 (100，按相反順序重新排列後，是001，與原數字不同)",
    "【輸入說明】",
    "第一行，輸入一個字串N。",
    "範例輸入說明:",
    "Sample Input:",
    "14!6@4.1(字串N)",
    "【輸出說明】",
    "判斷N是否為迴文，如果是，則將數字N中的重複項刪除，並以串列由小到大印出。若不是迴文，則將只留下數字N的重複項，並以串列由大到小印出。",
    "範例輸出說明:",
    "Sample Output:",
    "[1, 4, 6](將每個數字的重複項刪除後留下的串列，並由小到大)"
  ],
  "testcase": {
    "codeType": 0,
    "cases": [
      {
        "input": [
          "-12@34%56"
        ],
        "output": [
          "[]"
        ]
      },
      {
        "input": [
          "@11.1@11!"
        ],
        "output": [
          "[1]"
        ]
      },
      {
        "input": [
          "156@%!@#!@%546@##!@#66@%2"
        ],
        "output": [
          "[6, 5]"
        ]
      },
      {
        "input": [
          "9.8.51..215....89"
        ],
        "output": [
          "[1, 2, 5, 8, 9]"
        ]
      },
      {
        "input": [
          "@!@#!@#"
        ],
        "output": [
          "[]"
        ]
      }
    ]
  },
  "sampleCode": [
    "def main() -> None:",
    "  N = input()",
    "",
    "  valid = [i for i in N if i.isdigit()]",
    "",
    "  if not len(valid):",
    "    print([])",
    "    return",
    "",
    "  N = ''.join(valid)",
    "  valid = [int(i) for i in valid]",
    "  ",
    "  if N == N[::-1]:",
    "    valid.sort()",
    "    print(list(removeDup(valid)))",
    "    return",
    "",
    "  valid.sort(reverse=True)",
    "  print(fetchDup(valid))",
    "",
    "def removeDup(a: list) -> list:",
    "  seen = []",
    "  for i in a:",
    "    if i in seen: continue",
    "    seen.append(i)",
    "",
    "  return seen",
    "",
    "def fetchDup(a: list) -> list:",
    "  result = []",
    "  for i in a:",
    "    if i in result: continue",
    "    if a.count(i) < 2: continue",
    "    result.append(i)   ",
    "",
    "  return result",
    "",
    "if __name__ == \"__main__\":",
    "  main()"
  ]
}