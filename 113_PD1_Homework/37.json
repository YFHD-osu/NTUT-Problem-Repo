{
  "_comment": "Auto-generated from 037.py and 037.md",
  "title": "037 全班成績處理",
  "createDate": 1750301438546,
  "problem": [
    "第一行：輸入課程數M",
    "以下課程資料輸入重複M次",
    "{",
    "輸入課程資料(課程編碼，學期編碼，學生數量n)，中間以空白間隔",
    "輸入n筆修課學生資料(學號，學期成績，會考成績) ，中間以空白間隔",
    "}",
    "最後一行：欲搜尋課程編碼",
    "學生資料說明：若學生退選，學期成績為w",
    "非英文一101及國文一201的課程，僅包含學期成績(無會考成績)",
    "範例輸入：",
    "2 (課程數)",
    "1013 1121 9 (英文一課程編碼1013，112學年度上學期，學生數量9)",
    "11153001 59 63 (學生學號11153001，課程學期成績59，會考成績63)",
    "11153002 68 72 (學生學號11153002，課程學期成績68，會考成績72)",
    "11153003 39 64 (學生學號11153003，課程學期成績39，會考成績64)",
    "11153004 w (學生學號11153004，退選)",
    "11153005 68 82 (學生學號11153005，課程學期成績68，會考成績82)",
    "11253001 67 91 (學生學號11253001，課程學期成績67，會考成績91)",
    "11253002 78 92 (學生學號11253002，課程學期成績78，會考成績92)",
    "11253003 72 68 (學生學號11253003，課程學期成績72，會考成績68)",
    "11253004 91 76 (學生學號11253004，課程學期成績91，會考成績76)",
    "1214 1131 9 (課程編碼1214，113學年度上學期，學生數量9)",
    "11153001 63 (學生學號11153001，課程學期成績63)",
    "11153002 75 (學生學號11153002，課程學期成績75)",
    "11153003 82 (學生學號11153003，課程學期成績82)",
    "11153004 92 (學生學號11153004，課程學期成績92)",
    "11153005 83 (學生學號11153005，課程學期成績83)",
    "11253001 82 (學生學號11253001，課程學期成績82)",
    "11253002 79 (學生學號11253002，課程學期成績79)",
    "11253003 90 (學生學號11253003，課程學期成績90)",
    "11253004 70 (學生學號11253004，課程學期成績70)",
    "1013 (搜尋課程編碼1013歷年學期分數最高的前兩名學號和最多人數的科系)"
  ],
  "testcase": {
    "codeType": 0,
    "cases": [
      {
        "input": [
          "2",
          "1012 1101 17",
          "11029301 72 63",
          "11029302 64 72",
          "11029303 65 75",
          "11029307 72 81",
          "11029308 85 83",
          "11029309 75 72",
          "11029310 86 77",
          "11029311 83 79",
          "11029312 76 75",
          "11029313 82 74",
          "11029314 85 73",
          "11029315 89 72",
          "11029316 75 65",
          "11029317 83 72",
          "11029319 84 56",
          "11029320 82 73",
          "11029321 89 92",
          "1021 1102 20",
          "11029301 92",
          "11029302 53",
          "11029303 57",
          "11029304 66",
          "11029305 82",
          "11029306 85",
          "11029307 92",
          "11029308 95",
          "11029309 82",
          "11029310 86",
          "11029311 82",
          "11029312 86",
          "11029313 89",
          "11029314 87",
          "11029315 85",
          "11029316 86",
          "11029317 73",
          "11029319 w",
          "11029320 76",
          "11029321 74",
          "1012"
        ],
        "output": [
          "293 110 110",
          "11029308 88 1% 0%",
          "11029306 85 6% 0%",
          "11029310 84 11% 0%",
          "1012 110",
          "90 78 67 0%",
          "11029321 90 1%",
          "11029308 85 6%",
          "11029310 84 12%",
          "1021 110",
          "95 80 53 5%",
          "11029308 95 1%",
          "11029301 92 6%",
          "11029307 92 11%",
          "11029321 11029308 293"
        ]
      },
      {
        "input": [
          "3",
          "1033 1132 17",
          "11263001 65",
          "11263002 67",
          "11263003 68",
          "11263004 73",
          "11263005 69",
          "11263006 83",
          "11363001 92",
          "11363002 59",
          "11363003 88",
          "11363004 95",
          "11363005 76",
          "11363006 82",
          "11363007 62",
          "11363008 w",
          "11363009 59",
          "11363010 87",
          "11363011 72",
          "1033 1142 9",
          "11363001 83",
          "11363002 92",
          "11363003 70",
          "11363004 60",
          "11363005 81",
          "11363006 59",
          "11363007 66",
          "11363008 75",
          "11363009 71",
          "1072 1141 17",
          "11263001 82",
          "11263002 95",
          "11263003 78",
          "11263004 81",
          "11263005 77",
          "11263006 53",
          "11363001 86",
          "11363002 88",
          "11363003 87",
          "11363004 72",
          "11363005 95",
          "11363006 78",
          "11363007 83",
          "11363008 92",
          "11363009 83",
          "11363010 92",
          "11363011 75",
          "1033"
        ],
        "output": [
          "630 112 113",
          "11263006 83 1% 0%",
          "11263004 73 17% 0%",
          "11263005 69 34% 0%",
          "630 112 114",
          "11263002 95 1% 0%",
          "11263001 82 17% 0%",
          "11263004 81 34% 0%",
          "630 113 113",
          "11363004 95 1% 0%",
          "11363001 92 10% 0%",
          "11363003 88 19% 0%",
          "630 113 114",
          "11363010 92 1% 0%",
          "11363002 90 10% 0%",
          "11363005 86 19% 0%",
          "1033 113",
          "95 74 59 5%",
          "11363004 95 1%",
          "11363001 92 6%",
          "11363003 88 12%",
          "1033 114",
          "92 73 59 0%",
          "11363002 92 1%",
          "11363001 83 12%",
          "11363005 81 23%",
          "1072 114",
          "95 82 53 0%",
          "11263002 95 1%",
          "11363005 95 6%",
          "11363008 92 12%",
          "11363004 11363001 630"
        ]
      },
      {
        "input": [
          "3",
          "1012 1121 11",
          "11252001 62 78",
          "11252002 56 93",
          "11252003 85 64",
          "11252004 92 71",
          "11252005 83 72",
          "11252006 73 64",
          "11252007 81 63",
          "11252101 63 59",
          "11252102 73 64",
          "11252103 82 94",
          "11252104 75 64",
          "2012 1131 11",
          "11252001 82 94",
          "11252002 72 64",
          "11252003 92 71",
          "11252004 61 89",
          "11252005 69 96",
          "11252006 74 63",
          "11252007 32 69",
          "11252101 81 92",
          "11252102 70 65",
          "11252103 80 64",
          "11252104 75 68",
          "1035 1132 8",
          "11252001 53",
          "11252002 69",
          "11252003 82",
          "11252004 79",
          "11252101 83",
          "11252102 90",
          "11252103 88",
          "11252104 92",
          "1012"
        ],
        "output": [
          "520 112 112",
          "11252004 86 1% 0%",
          "11252005 80 15% 0%",
          "11252003 79 29% 0%",
          "520 112 113",
          "11252003 83 1% 0%",
          "11252005 78 15% 0%",
          "11252004 76 29% 0%",
          "521 112 112",
          "11252103 86 1% 0%",
          "11252104 72 26% 0%",
          "11252102 71 51% 0%",
          "521 112 113",
          "11252104 86 1% 0%",
          "11252102 84 26% 0%",
          "11252103 84 51% 0%",
          "1012 112",
          "86 74 62 0%",
          "11252004 86 1%",
          "11252103 86 10%",
          "11252005 80 19%",
          "1035 113",
          "92 79 53 0%",
          "11252104 92 1%",
          "11252102 90 13%",
          "11252103 88 26%",
          "2012 113",
          "86 73 44 0%",
          "11252001 86 1%",
          "11252003 86 10%",
          "11252101 85 19%",
          "11252004 11252103 520"
        ]
      }
    ]
  },
  "sampleCode": [
    "import math",
    "",
    "def main() -> None:",
    "  count = int(input())",
    "",
    "  database = {}",
    "",
    "  for _ in range(count):",
    "    addCourse(database)",
    "",
    "  showOverAll(database)",
    "  showClassBest(database)",
    "  query(database, input())",
    "  return",
    "",
    "def calcPercent(people: int, rank: int, percent: int = 1, accumulate: int = 0) -> float:",
    "  this = math.ceil(people * percent / 100)",
    "",
    "  # People count in this interval",
    "  interval = this - accumulate",
    "  ",
    "  if interval >= rank:",
    "    return percent",
    "  ",
    "  return calcPercent(people, rank-interval, percent+1, accumulate+interval)",
    "",
    "def addCourse(db: dict) -> dict:",
    "  base = input().split()",
    "",
    "  courseId = base[0]",
    "  semester = base[1]",
    "  students = int(base[2])",
    "",
    "  # Enable special grade calculation",
    "  special = courseId.startswith((\"101\", \"201\"))",
    "",
    "  for _ in range(students):",
    "    grade = input().split()",
    "",
    "    department = grade[0][3:6]",
    "    year = grade[0][:3]",
    "    ",
    "    key = f\"{courseId}-{semester}-{year}-{department}\"",
    "",
    "    if key not in db:",
    "      db[key] = {}",
    "",
    "    if grade[1] == \"w\":",
    "      db[key].update({grade[0]: None})",
    "      continue",
    "",
    "    if special:",
    "      db[key].update({grade[0]: math.ceil(int(grade[1]) * .7 + int(grade[2]) * .3)})",
    "    else:",
    "      db[key].update({grade[0]: int(grade[1])})",
    "",
    "def fetchThrid(d: dict, department: str, year: str, semester: str) -> list:",
    "  def fetchAllPts(l: list):",
    "    return sum(map(lambda e: e[1], filter(lambda e: e[0] != None, l)))",
    "  ",
    "  def fetchScoreSum(l: list):",
    "    return sum(map(lambda e: e[0] * e[1], filter(lambda e: e[0] != None, l)))",
    "  ",
    "  def fetchAvg(l: list):",
    "    if fetchAllPts(l) == 0: return 0",
    "    return fetchScoreSum(l) / fetchAllPts(l) // 1",
    "  ",
    "  def fetchGiveUp(l: list):",
    "    return len(list(filter(lambda e: e[0] == None, l))) / len(l) * 100 // 1",
    "  students = {}",
    "  ",
    "  keys = [f\"-{semester}{i}-{year}-{department}\" for i in range(1, 3)]",
    "",
    "  for course in filter(lambda e: str(e).endswith(tuple(keys)), d.keys()):",
    "    for student in d[course].keys():",
    "      if student not in students:",
    "        students[student] = []",
    "      students[student].append( (d[course][student], int(course.split(\"-\")[0][-1])) )",
    "  ",
    "  ",
    "",
    "  res = sorted(students.keys(), key=lambda k: fetchAvg(students.get(k)), reverse=True)",
    "",
    "  return [(i, fetchAvg(students[i]), fetchGiveUp(students[i])) for i in res]",
    "",
    "def showOverAll(d: dict) -> None:",
    "  coruses = sorted(d.keys(), key=lambda e: e.split('-')[::-1])",
    "  seen = set()",
    "",
    "  for course in coruses:",
    "    data = course.split('-')",
    "    title = \"%s %s %s\" % (data[-1], data[-2], data[-3][:-1])",
    "    if title in seen:",
    "      continue",
    "",
    "    seen.add(title)",
    "    print(title)",
    "",
    "    data = fetchThrid(d, data[-1], data[-2], data[-3][:-1])",
    "    for i, v in enumerate(data):",
    "      if i > 2: break",
    "      print(f\"{v[0]} {int(v[1])} {calcPercent(len(data), i+1)}% {int(v[2])}%\")",
    "",
    "def showClassBest(d: dict) -> None:",
    "  def proc(a: str):",
    "    data = a.split(\"-\")",
    "    return f\"{data[0]}-{data[1][:-1]}\"",
    "  ",
    "  classes = sorted(set([proc(i) for i in d.keys()]))",
    "  for cls in classes:",
    "    print(cls.replace(\"-\", \" \"))",
    "    _max, _avg, _min, _quit, _data = fetchClassInfo(d, cls)",
    "    print(_max, _avg, _min, f\"{int(_quit)}%\")",
    "    for i, data in enumerate(_data[:3]):",
    "      print(data[0], data[1], f\"{calcPercent(len(_data), i+1)}%\")",
    "",
    "def fetchClassInfo(d: dict, q: str) -> tuple:",
    "  students = {}",
    "",
    "  for key in filter(lambda e: str(e).startswith(q), d.keys()):",
    "    for stu in d[key]:",
    "      students[stu] = d[key][stu]",
    "",
    "  scores = [students[a] for a in students if students.get(a) != None]",
    "",
    "  _max = max(scores)",
    "  _avg = math.floor(sum(scores)/len(scores))",
    "  _min = min(scores)",
    "  _quit = (len(students) - len(scores)) / len(students) * 100 // 1",
    "",
    "  for key in students:",
    "    if students[key] == None:",
    "      students[key] = 0",
    "",
    "  _data = [(id, students.get(id)) for id in g8Sort(students)]",
    "  ",
    "  return ( _max, _avg, _min, _quit, _data)",
    "",
    "def query(d: dict, q: str) -> None:",
    "  keys = [i for i in d if str(i).startswith(q)]",
    "",
    "  students = {}",
    "  for k in keys:",
    "    for key, value in d[k].items():",
    "      if value == None: continue",
    "      if students.get(key, 0) > value: continue",
    "      students[key] = value",
    "",
    "  ",
    "  data = g8Sort(students)",
    "  ",
    "  department = {}",
    "",
    "  for k in students:",
    "    department[k[3:6]] = department.get(k[3:6], 0) + 1",
    "",
    "  most = sorted(department, key=department.get, reverse=True)",
    "  print(data[0], data[1], most[0])",
    "",
    "def g8Sort(students: dict) -> list:",
    "  scores = {}",
    "  for k, v in students.items():",
    "    scores[v] = scores.get(v, []) + [k]",
    "",
    "  data = [ ]",
    "  for k in sorted(scores, reverse=True):",
    "    data += sorted(scores[k])",
    "",
    "  return data",
    "",
    "",
    "",
    "if __name__ == \"__main__\":",
    "  main()"
  ]
}