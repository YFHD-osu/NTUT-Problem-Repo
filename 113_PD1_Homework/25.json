{
  "_comment": "Auto-generated from 025.py and 025.md",
  "title": "25. 成對檢查",
  "createDate": 1750302596249,
  "problem": [
    "給定 N個 ( 1 <= N <= 3 ) 字串，",
    "每一個字串M (1 <= len(M) <= 50) 由括號與英文字母組成",
    "括號共有三種： {, }, [, ], (, )",
    "檢查這字串M中的括號是否成對出現，",
    "如果括號成對出現，代表通過檢查，輸出\"pass\"，並且輸出深度D(1<= D <= 6) 中的所有英文字母",
    "如果括號沒有成對出現，代表未通過檢查，輸出\"fail\"。",
    "深度：字串由左至右閱讀，深度從0開始，當遇到左括號深度加一層，遇到右括號深度減一層，且字串中括號必須成對出現，深度才成立。",
    "例: {a[b(c)d]e}",
    "深度 1: a, e",
    "深度 2: b, d",
    "深度 3: c",
    "成對出現定義：",
    "若多個左括號出現，後出現的左括號應最先出現對應的右括號，不可對調順序",
    "成立：",
    "{a[b(c)d]e}，左括號依序為 { [ (，因此右括號出現順序應為 ) ] }",
    "{a}[b](c) 成對且對於 a、b、c來說都屬於深度1。",
    "[a[b](c{d})]，深度1：a，深度2：bc，深度3：d。",
    "不成立：({)}、{([)]}、))))等，未依正確順序組成。",
    "【輸入說明】",
    "第1行:輸入一整數N (1<=N<=3)",
    "第2行:輸入一整數D (1<= D <= 6)",
    "第3~N+2行:輸入一字串",
    "範例輸入說明:",
    "Sample Input:",
    "3                  (3個字串)",
    "3                  (深度3)",
    "{b[bc][c(bd)]}     (字串1)",
    "{q(ac)(df)(bn)r}   (字串2)",
    "{b{[h]}dc[d(i)a]}  (字串3)",
    "【輸出說明】",
    "第1~N行根據輸入的各行字串判斷如下:",
    "(1)如果字串內括號皆成對出現，輸出\"pass,\"",
    "依照深度要求依序輸出深度內的字母，若該深度未擁有任何字母，輸出\"EMPTY\"",
    "(2)如果字串內括號沒有成對出現，輸出\"fail\"",
    "範例輸出說明:",
    "pass,bd     (括號皆有成對，且深度要求內也有字母)",
    "pass,EMPTY  (括號皆有成對，但深度要求內沒有字母)",
    "pass,hi     (括號皆有成對，且深度要求內也有字母)"
  ],
  "testcase": {
    "codeType": 0,
    "cases": [
      {
        "input": [
          "3",
          "3",
          "{[()][]}",
          "{}[(])",
          "{{{{{{"
        ],
        "output": [
          "pass,EMPTY",
          "fail",
          "fail"
        ]
      },
      {
        "input": [
          "2",
          "1",
          "(Fa[ad(dsa{fd}asdf)srfa]k(ssd)er)",
          "{(qq{ww}ee){rr}}"
        ],
        "output": [
          "pass,Faker",
          "pass,EMPTY"
        ]
      },
      {
        "input": [
          "1",
          "2",
          "([{abc}]qwe({}[qe)qw]hgh)"
        ],
        "output": [
          "fail"
        ]
      },
      {
        "input": [
          "3",
          "4",
          "{a(b[c(D)(O)e][f(F)h]i)(j[k(G)m][n(K)p]q)r}",
          "(q[w(e{[q]}r)a][a(s{}d)f]z)",
          "[p(o{i})l((j{h}t)j}g{m)h]"
        ],
        "output": [
          "pass,DOFGK",
          "pass,EMPTY",
          "fail"
        ]
      }
    ]
  },
  "sampleCode": [
    "L_BRACKET = ['(', '[', '{']",
    "R_BRACKET = [')', ']', '}']",
    "",
    "def main() -> None:",
    "  count = int(input())",
    "  depth = int(input())",
    "  while count:",
    "    count -= 1",
    "    resp = valid(input(), depth)",
    "    ",
    "    if resp == -1:",
    "      print(\"fail\")",
    "    elif not len(resp):",
    "      print(\"pass,EMPTY\")",
    "    else:",
    "      print(\"pass,%s\" % (resp))",
    "",
    "def valid(s: str, target: int, data: list=[], result: str = \"\"):",
    "  if not len(s):",
    "    if data: return -1",
    "    return result",
    "  ",
    "  if s[0] in L_BRACKET:",
    "    data.append(L_BRACKET.index(s[0]))",
    "  ",
    "  if len(data) == target and s[0] not in L_BRACKET+R_BRACKET:",
    "    result+=s[0]",
    "",
    "  if s[0] in R_BRACKET:",
    "    if data[-1] != R_BRACKET.index(s[0]):",
    "      return -1",
    "    data.pop(len(data)-1)",
    "",
    "  return valid(s[1:], target, data, result)",
    "",
    "if __name__ == '__main__':",
    "  main()"
  ]
}