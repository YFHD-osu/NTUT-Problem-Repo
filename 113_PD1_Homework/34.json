{
  "_comment": "Auto-generated from 034.py and 034.md",
  "title": "34. 基因序列",
  "createDate": 1750302596251,
  "problem": [
    "DNA序列是由英文字母組成的字串，基因(gene)是隱藏於DNA序列中的部分片段(子字串)。",
    "給定一個DNA序列字串，序列字串長度小於50，找出在DNA序列字串中的基因，",
    "基因可能有多個，且須符合兩個規則，規則如下：",
    "規則一",
    "給定一個前面序列字串以及三個後面序列字串，基因需為被前面序列字串與後面序列字串夾在中間的字串。",
    "其中，前面序列字串格式為A??G，??是E~T任兩個不同字母組合。",
    "如：給定前面序列字串為 AHTG，給定後面序列字串為TAG、TAA、TGA。",
    "則給定DNA序列字串為AHTGTTTTAA，則被AHTG和TAA夾在中間的TTT即符合此規則。",
    "規則二",
    "基因長度需為質數，其中未含有前面序列字串與後面序列字串。",
    "如：根據規則一所得到的基因TTT長度為3，3是質數，因此TTT符合此規則。",
    "【輸入說明】",
    "第一行：輸入一個基因前面序列字串",
    "第二行：輸入三個基因後面序列字串，中間以空白間隔",
    "第三行：輸入一個DNA序列字串",
    "所有字串的長度皆小於50",
    "範例輸入：",
    "AEHG",
    "TAG TAA TGA",
    "AEHGTTTTAA",
    "【輸出說明】",
    "找出DNA序列字串中所有的基因，並以字母由小到大排序，輸出排序後的結果",
    "若沒有找到基因，則輸出：No gene",
    "範例輸出：",
    "TTT"
  ],
  "testcase": {
    "codeType": 0,
    "cases": [
      {
        "input": [
          "AEHG",
          "TAG TAA TGA",
          "AEHGTTTTAA"
        ],
        "output": [
          "TTT"
        ]
      },
      {
        "input": [
          "ACA",
          "CAG TCA AGT",
          "ACATTTTACGCT"
        ],
        "output": [
          "No gene"
        ]
      },
      {
        "input": [
          "AETG",
          "TAG TAA TGA",
          "AETGTTTTAGAETGCTATGAAETGACGTTTAAAETGACCCATAG"
        ],
        "output": [
          "CTA",
          "TTT",
          "ACCCA",
          "ACGTT"
        ]
      },
      {
        "input": [
          "AKLG",
          "GAT GTA CAT",
          "AKLGCCCTAGTAAKLGTTTAAACCATAKLGGGGGTAAKLGCTGGAT"
        ],
        "output": [
          "CTG",
          "GGG",
          "CCCTA",
          "TTTAAAC"
        ]
      }
    ]
  },
  "sampleCode": [
    "def main():",
    "  start = input()",
    "  end = input().split()",
    "  seq = input()",
    "",
    "  possible = seq.split(start)",
    "  if not seq.startswith(start):",
    "    possible = possible[1:]",
    "",
    "  results = []",
    "  for item in possible:",
    "    endLen = findEndLen(item, end)",
    "",
    "    if not endLen:",
    "      continue",
    "",
    "    results.append(item[:-endLen])",
    "  ",
    "  if not len(results):",
    "    print(\"No gene\")",
    "    return",
    "  ",
    "  results.sort(key=lambda e: f\"{len(e)}{e}\")",
    "  print(\"\\n\".join(results))",
    "",
    "def findEndLen(a: str, possible: list, ) -> int:",
    "  for item in possible:",
    "    if a.endswith(item):",
    "      return len(item)",
    "",
    "  return 0",
    "",
    "if __name__ == \"__main__\":",
    "  main()"
  ]
}