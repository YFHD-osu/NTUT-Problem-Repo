{
  "_comment": "Auto-generated from 016.py and 016.md",
  "title": "16. 梭哈類型",
  "createDate": 1750302596248,
  "problem": [
    "輸入5張牌，輸出牌型的類別編號，每張牌由牌面與花色組成，牌面與花色的表示如下：",
    "牌面： A、2~10、J、Q、K",
    "花色：S (Spade,黑桃),H (Heart,紅心),D (Diamond,方塊), C (Club,梅花)",
    "例如：7S 表示黑桃7",
    "牌型編號(編號越大代表牌型越大)：",
    "(1) High Card : 單一張牌。",
    "(2) One pair: 兩張牌數字一樣",
    "(3) Two pairs : 兩組 Pair 的牌。",
    "(4) Three of a kind : 三張牌數字一樣。",
    "(5) Straight : 數字連續的五張牌，頭尾相接亦視為Straight。例如[2, 3, 4, 5, 6],..,[Q, K, A, 2, 3], [K, A, 2, 3, 4], [A, 2, 3, 4, 5]。",
    "(6) Flush : 五張同一花色的牌",
    "(7) Full House : Three of a Kind 加一個 Pair",
    "(8) Four of a kind: : 四張牌數字一樣",
    "(9) Straight flush : 數字連續的五張牌且花色一樣",
    "【輸入說明】",
    "第一行：輸入一行字串，包含五張牌，每張牌中間以空白隔開",
    "範例輸入說明:",
    "Sample Input:",
    "7S 7H 7D 6C 6S",
    "（表示 黑桃7 紅心7 方塊7 梅花6 黑桃6）",
    "【輸出說明】",
    "第一行：輸出一個整數（1~9），表示最大的牌型編號。",
    "【特別要求】",
    "1. 如果一副牌中有不合法的輸入，像是不存在的牌面、花色，則輸出 \"Error input\"",
    "2. 如果一副牌中有重複的牌出現，即一副牌當中有兩張以上牌面跟花色一模一樣，則輸出\"Duplicate deal\"",
    "3. 如果\"Error input\"和\"Duplicate deal\"同時發生，則輸出\"Error input\"",
    "範例輸出說明:",
    "Sample Output:",
    "7 （對應牌型為編號7的Full house）"
  ],
  "testcase": {
    "codeType": 0,
    "cases": [
      {
        "input": [
          "5S 5H 5D 5C 5R"
        ],
        "output": [
          "Error input"
        ]
      },
      {
        "input": [
          "6S 6H 6D 6C 6S"
        ],
        "output": [
          "Duplicate deal"
        ]
      },
      {
        "input": [
          "AS 2H 3D 5C 6SS"
        ],
        "output": [
          "Error input"
        ]
      },
      {
        "input": [
          "AS 5C 3D 5C 6SS"
        ],
        "output": [
          "Error input"
        ]
      },
      {
        "input": [
          "AS 3S 5S 7S 9S"
        ],
        "output": [
          "6"
        ]
      },
      {
        "input": [
          "AS 3S 5S 7S 9D"
        ],
        "output": [
          "1"
        ]
      },
      {
        "input": [
          "JS QS AS 10S KS"
        ],
        "output": [
          "9"
        ]
      },
      {
        "input": [
          "AS JH JD AD 5C"
        ],
        "output": [
          "3"
        ]
      },
      {
        "input": [
          "6S 4S 6H 10S 2D"
        ],
        "output": [
          "2"
        ]
      },
      {
        "input": [
          "3S 3H 9D 3D 3C"
        ],
        "output": [
          "8"
        ]
      },
      {
        "input": [
          "AS 8D 5C 8C 8H"
        ],
        "output": [
          "4"
        ]
      },
      {
        "input": [
          "JS 9S KS 10S QD"
        ],
        "output": [
          "5"
        ]
      },
      {
        "input": [
          "7S 7H 7D 6C 6S"
        ],
        "output": [
          "7"
        ]
      }
    ]
  },
  "sampleCode": [
    "LEGAL_FACE = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']",
    "LEGAL_TYPE = ['S', 'H', 'D', 'C']",
    "",
    "def main() -> None:",
    "  cards = [addCard(x) for x in input().split(\" \")]",
    "",
    "  if None in cards:",
    "    return print(\"Error input\")",
    "  ",
    "  if isDuplicate(cards):",
    "    return print(\"Duplicate deal\")",
    "",
    "  if (isStraightFlush(cards)):",
    "    return print(\"9\")",
    "  ",
    "  if isFourOfAKind(cards): ",
    "    return print(\"8\")",
    "  ",
    "  if (isFullHouse(cards)):",
    "    return print(\"7\")",
    "  ",
    "  if (isFlush(cards)):",
    "    return print(\"6\")",
    "  ",
    "  if (isStraight(cards)):",
    "    return print(\"5\")",
    "  ",
    "  if (findThreeOfKind(cards)):",
    "    return print(\"4\")",
    "  ",
    "  if (isTwoPairs(cards)):",
    "    return print(3)",
    "  ",
    "  if (findOnePair(cards)):",
    "    return print(2)",
    "",
    "  return print(1)",
    "",
    "def addCard(t: str):",
    "  if not t[-1] in LEGAL_TYPE:",
    "    return None",
    "  ",
    "  if not t[:-1] in LEGAL_FACE:",
    "    return None",
    "  ",
    "  return [LEGAL_TYPE.index(t[-1]), LEGAL_FACE.index(t[:-1])]",
    "",
    "def isFlush(t: list) -> bool:",
    "  cardType = t[0][0]",
    "",
    "  for i in t:",
    "    if i[0] != cardType: return False",
    "",
    "  return True",
    "    ",
    "def isDuplicate(t: list) -> bool:",
    "  for i in range(len(t)):",
    "    for j in range(i, len(t)):",
    "      if i == j: continue",
    "      if t[i] == t[j]: return True",
    "",
    "  return False",
    "",
    "def isFourOfAKind(t: list) -> bool:",
    "  for i in range(len(t)):",
    "    # Remove a card from list",
    "    fourCards = t[0:i] + t[i+1:]",
    "    num = fourCards[0][1]",
    "    res = [card for card in fourCards if card[1] != num]",
    "    if (len(res) == 0): return True",
    "",
    "  return False",
    "",
    "def isStraightFlush(t: list) -> bool:",
    "  firstType: str = t[0][0]",
    "",
    "  if False in [i[0] == firstType for i in t]:",
    "    return False",
    "  ",
    "  return isStraight(t)",
    "",
    "# Return a list of founded card in index form",
    "def findThreeOfKind(t: list) -> list:",
    "  for i in range(len(t)):",
    "    for j in range(i+1, len(t)):",
    "      for k in range(j+1, len(t)):",
    "        if t[i][1] == t[j][1] == t[k][1]:",
    "          return [i, j, k]",
    "        ",
    "  return None",
    "",
    "def findOnePair(t: list) -> list:",
    "  for i in range(len(t)):",
    "    for j in range(i+1, len(t)):",
    "      if t[i][1] == t[j][1]: return [i, j]",
    "    ",
    "  return None",
    "",
    "def isStraight(t: list) -> bool:",
    "  faces = sorted([x[1] for x in t])",
    "",
    "  comboBreak = 0",
    "  for i in range(len(faces)-1):",
    "     if (faces[i+1] - faces[i]) != 1:",
    "      comboBreak += 1",
    "  ",
    "  if comboBreak == 1 and (0 in faces) and (12 in faces):",
    "    return True",
    "  ",
    "  if comboBreak == 0:",
    "    return True",
    "  ",
    "  return False",
    "",
    "def isFullHouse(t: list) -> bool:",
    "  threeOfKind = findThreeOfKind(t)",
    "  ",
    "  if (threeOfKind == None): return False",
    "  ",
    "  onePair = findOnePair([t[i] for i in range(len(t)) if i not in threeOfKind])",
    "",
    "  return onePair != None",
    "",
    "def isTwoPairs(t: list) -> bool:",
    "  onePair = findOnePair(t)",
    "",
    "  if (not onePair):",
    "    return False",
    "",
    "  return findOnePair([t[i] for i in range(len(t)) if not i in onePair]) != None",
    "",
    "if __name__ == \"__main__\":",
    "  main()"
  ]
}