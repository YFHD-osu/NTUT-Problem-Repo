{
  "_comment": "Auto-generated from 018.py and 018.md",
  "title": "18. TwoSum",
  "createDate": 1750302596248,
  "problem": [
    "給定一個整數串列 nums 和一個整數 target，請找出串列中兩個不同索引的數字，使得它們的和等於 target。每個輸入至少都有一個解，不能在同一組合內使用相同索引的元素。若存在多組解答，請回傳兩個索引乘積最大的組合，並將它們以列表的形式返回，回傳的列表內的索引順序由大到小排序。",
    "【輸入說明】",
    "第一行，輸入N個整數代表串列nums中的元素，2<=N<=20，整數中間以空白隔開。",
    "第二行，輸入一個整數target。",
    "範例輸入說明:",
    "Sample Input:",
    "3 4 2 5 1(nums串列內的元素)",
    "6(target值)",
    "【輸出說明】",
    "輸出相加為target的兩個元素的索引和最大的組合，由大到小以串列輸出。",
    "範例輸出說明:",
    "[4, 3] (相加為6的元素index組合有(1,2)、(3,4)，而3*4 > 1*2。)"
  ],
  "testcase": {
    "codeType": 0,
    "cases": [
      {
        "input": [
          "3 6 1 5 8",
          "9"
        ],
        "output": [
          "[4, 2]"
        ]
      },
      {
        "input": [
          "5 1 3 2 4",
          "5"
        ],
        "output": [
          "[3, 2]"
        ]
      },
      {
        "input": [
          "100 200 300 400",
          "500"
        ],
        "output": [
          "[2, 1]"
        ]
      }
    ]
  },
  "sampleCode": [
    "def main():",
    "  nums = list(map(int, input().split()))",
    "  target  = int(input())",
    "",
    "  sets = fetchAllSet(target, nums)",
    "  sets.sort(reverse=True, key=lambda e: e[0] * e[1])",
    "",
    "  print(sets[0])",
    "",
    "def fetchAllSet(t: int, n: list) -> list:",
    "  res = []",
    "  for i in range(len(n)):",
    "    for j in range(i+1, len(n)):",
    "      if (n[i] + n[j] != t): continue",
    "      res.append([j, i])",
    "",
    "  return res",
    "",
    "if __name__ == \"__main__\":",
    "  main()",
    "",
    "\"\"\"\"",
    "def main():",
    "  nums = list(map(int, input().split(\" \")))",
    "  target = int(input()) ",
    "  data = fetchAllSet(nums, target) ",
    "  data.sort(key=lambda e: e[0] * e[1], reverse=True) ",
    "  print(sorted(data[0], reverse=True)) ",
    "",
    "def fetchAllSet(nums: list, target: int) -> list:",
    "    res = []",
    "    for i in range(len(nums)):",
    "        for j in range(i + 1, len(nums)):",
    "            if nums[i] + nums[j] == target:",
    "                res.append([i, j])",
    "    return res",
    "",
    "if __name__ == \"__main__\":",
    "    main()",
    "    ",
    "\"\"\""
  ]
}