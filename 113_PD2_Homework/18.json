{
  "_comment": null,
  
  "title": "18. 分散度",
  "createDate": 1744027200000,
  "collections": [],
  "problem": [
    "輸入一個整數m，及一串整數序列，計算此序列的m分散度，",
    "輸出該m分散度的連續子序列總數，及其所有已排序且不重複的連續子序列，",
    "不須考慮連續子序列總數為零的狀況。",
    "",
    "m分散度的連續子序列定義為：",
    "序列中可分成多個長度為m且index連續的子序列，而子序列中不能包含重複數字。",
    "",
    "連續子序列排序方式：",
    "子序列以{ x y z }為例，",
    "以 x 值小到大進行排序，若 x 值相同，以 y 值小到大進行排序，以此類推。",
    "",
    "例如：",
    "m=3，整數序列為{ 1 2 3 1 2 3 3 }，",
    "可分割成：{ 1 2 3 }、{ 2 3 1 }、{ 3 1 2 }、{ 1 2 3 }、{ 2 3 3 }，長度為3且index連續的子序列，",
    "而其中不包含重複數字的子序列為：{ 1 2 3 }、{ 2 3 1 }、{ 3 1 2 }、{ 1 2 3 }",
    "因此3分散度的連續子序列總數為4個，",
    "依序輸出已排序且不重複的連續子序列為：{ 1 2 3 }、{ 2 3 1 }、{ 3 1 2 }",
    "",
    "【輸入說明】",
    "第一行：一整數m（3<=m<=10），代表m分散度",
    "第二行：輸入一串長度為a的整數序列（m<=a<=20），整數中間以空白間隔，序列中的整數b大小為0<=b<=9",
    "",
    "範例輸入：",
    "3（分散度m為3）",
    "1 2 3 5 4 5 4（整數序列）",
    "",
    "【輸出說明】",
    "第一行輸出該整數序列m分散度的連續子序列總數",
    "其後n行，每行依序輸出已排序且不重複的一組連續子序列，整數中間以空白間隔",
    "",
    "範例輸出：",
    "3（連續子序列總數）",
    "1 2 3",
    "2 3 5",
    "3 5 4"
  ],
  "testcase": {
    "codeType": 1,
    "cases": [
      {
        "input": [
          "4",
          "1 2 3 6 9 4 5 6 7"
        ],
        "output": [
          "6",
          "1 2 3 6",
          "2 3 6 9",
          "3 6 9 4",
          "4 5 6 7",
          "6 9 4 5",
          "9 4 5 6"
        ]
      },
      {
        "input": [
          "5",
          "1 5 9 6 3 4 8 1 4 5 5 6 4 6"
        ],
        "output": [
          "4",
          "1 5 9 6 3",
          "5 9 6 3 4",
          "6 3 4 8 1",
          "9 6 3 4 8"
        ]
      },
      {
        "input": [
          "4",
          "5 4 8 7 5 4 8 7 5"
        ],
        "output": [
          "6",
          "4 8 7 5",
          "5 4 8 7",
          "7 5 4 8",
          "8 7 5 4"
        ]
      }
    ]
  },
  "sampleCode": [
    "#include <stdio.h>",
    "",
    "char isValid(char (*s)[], unsigned int start, unsigned int length);",
    "char stringCMP(char (*a)[], int aOffset, char (*b)[], int bOffset, int length);",
    "char isSeen(char (*source)[], unsigned short sourceOffset, char (*seen)[], unsigned short sectionLen, unsigned short checkCount);",
    "void addSeen(char (*source)[], unsigned short sourceOffset, char (*seen)[], unsigned short sectionLen, unsigned short checkCount);",
    "void sort(char (*s)[], int sectionLen, int totalCount);",
    "",
    "int main() {",
    "  int count;",
    "  char arr[50];",
    "  char seen[200];",
    "",
    "  scanf(\"%d\", &count);",
    "  getchar();",
    "",
    "  scanf(\" %[^\\n]\", &arr);",
    "  getchar();",
    "",
    "  int sectionLen = count*2 - 1;",
    "",
    "  unsigned int stage1Count = 0;",
    "  unsigned int stage2Count = 0;",
    "  ",
    "  int index = 0;",
    "  ",
    "  while (arr[index+sectionLen-1] != '\\0') {",
    "",
    "    // Skip spaces",
    "    if (arr[index] < '0' || arr[index] > '9') {",
    "      index++;",
    "      continue;",
    "    }",
    "",
    "    if (!isValid(&arr, index, sectionLen)) {",
    "      index++;",
    "      continue;",
    "    }",
    "",
    "    stage1Count++;",
    "",
    "    if (isSeen(&arr, index, &seen, sectionLen, stage2Count)) {",
    "      index++;",
    "      continue;",
    "    }",
    "",
    "    addSeen(&arr, index, &seen, sectionLen, stage2Count);",
    "    index++;",
    "    stage2Count ++;",
    "  }",
    "",
    "  seen[stage2Count*(sectionLen+1)-1] = '\\0';",
    "",
    "  sort(&seen, sectionLen, stage2Count);",
    "",
    "  printf(\"%d\\n\", stage1Count);",
    "  printf(\"%s\\n\", seen);",
    "",
    "  return 0;",
    "}",
    "",
    "// Check whether there is an duplicated number",
    "char isValid(char (*s)[], unsigned int start, unsigned int length) {",
    "  char buf[10] = {0};",
    "",
    "  int index = 0;",
    "  while (index < length) {",
    "    if ((*s)[start+index] == ' ') {",
    "      index ++;",
    "      continue;",
    "    }",
    "",
    "    int num = (*s)[start+index] - '0';",
    "",
    "    if (buf[num]) {",
    "      return 0;",
    "    }",
    "",
    "    buf[num] += 1;",
    "    index ++;",
    "  }",
    "",
    "  return 1;",
    "}",
    "",
    "void addSeen(char (*source)[], unsigned short sourceOffset, char (*seen)[], unsigned short sectionLen, unsigned short checkCount) {",
    "  int index = 0; // The big index",
    "",
    "  int start = checkCount * (sectionLen+1);",
    "",
    "  for (int i=0; i<sectionLen ; i++) {",
    "    (*seen)[start+i] = (*source)[sourceOffset+i];",
    "  }",
    "",
    "  (*seen)[start+sectionLen] = '\\n';",
    "}",
    "",
    "char isSeen(char (*source)[], unsigned short sourceOffset, char (*seen)[], unsigned short sectionLen, unsigned short checkCount) {",
    "  int index = 0; // The big index",
    "",
    "  while (index < checkCount) {",
    "    ",
    "    int start = index * (sectionLen+1);",
    "    ",
    "    char hasDiff = 0;",
    "",
    "    for (int i=0; i<sectionLen ; i++) {",
    "      if ((*source)[sourceOffset+i] != (*seen)[start+i]) {",
    "        hasDiff = 1;",
    "        break;",
    "      }",
    "    }",
    "",
    "    if (!hasDiff) {",
    "      return 1;",
    "    }",
    "",
    "    index++;",
    "  }",
    "",
    "  return 0;",
    "}",
    "",
    "char stringCMP(char (*a)[], int aOffset, char (*b)[], int bOffset, int length) {",
    "  for (int i=0; i<length ; i++) {",
    "    if ((*a)[aOffset+i] == (*b)[bOffset+i]) {",
    "      continue;",
    "    }",
    "    return (*a)[aOffset+i] > (*b)[bOffset+i] ? 1 : -1;",
    "  }",
    "",
    "  return 0;",
    "}",
    "",
    "void swap(char (*s)[], int aOffset, int bOffset, int length) {",
    "  char buf;",
    "  for (int i=0; i<length ; i++) {",
    "    buf = (*s)[aOffset+i];",
    "    (*s)[aOffset+i] = (*s)[bOffset+i];",
    "    (*s)[bOffset+i] = buf;",
    "  }",
    "}",
    "",
    "void sort(char (*s)[], int sectionLen, int totalCount) {",
    "  int maxLen = (sectionLen+1) * totalCount;",
    "",
    "  int index = 0;",
    "",
    "  for (int j=0; j<totalCount-1; j++) {",
    "    for (int i=0; i<totalCount-1; i++) {",
    "      int aOffset = i*(sectionLen+1);",
    "      int result = stringCMP(s, aOffset, s, aOffset+sectionLen+1, sectionLen);",
    "  ",
    "      if (result > 0) {",
    "        swap(s, aOffset, aOffset+sectionLen+1, sectionLen);",
    "      }",
    "    }",
    "  }",
    "}"
  ]
}