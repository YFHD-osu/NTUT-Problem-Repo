{
  "_comment": null,
  
  "title": "39. 圖形結構",
  "createDate": 1749484740000,
  "collections": [],
  "problem": [
    "本題必須使用給定程式碼架構的struct及function pointer實作",
    "請參考給定的程式碼架構，使用 struct 定義以下結構：",
    "Shape（圖形）, Circle（圓形）, Rectangle（矩形）, Square（正方形）,",
    "Triangle（三角形）",
    "",
    "圓形有半徑，矩形有長和寬，正方形有邊長，三角形有三個邊。",
    "計算各個圖形的周長與面積，以及所有圖形的周長加總與面積加總。",
    "",
    "圖形的程式碼架構參考範例如下：",
    "#define ShapeText(TYPE) char name[10];",
    "double (*perimeter)(struct TYPE*);",
    "double (*area)(struct TYPE*)",
    "",
    "typedef struct shape_s {",
    "ShapeText(shape_s);",
    "} shape_t;",
    "",
    "typedef struct circle_s {",
    "ShapeText(circle_s);",
    "double radius;",
    "} circle_t;",
    "",
    "圖形的種類以代號輸入，對應圖形的代號如下：",
    "C：圓形，結構內容具有 1 個 radius 屬性 (圓周率PI請使用3.14)",
    "R：矩形，結構內容具有 1 個 length、1 個 width 屬性",
    "S：正方形，結構內容具有 1 個 edge 屬性",
    "T：三角形，結構內容具有 3 個 edge 屬性",
    "",
    "三角形面積計算請使用海龍公式：",
    "",
    "",
    "【輸入說明】",
    "第一行輸入 N ( 2 <= N <= 5 )，代表圖形個數。",
    "其後 N 行，輸入英文代號代表圖形種類，與該圖形種類的各個屬性(屬性為整數)，字元間以空格符號相隔開。",
    "",
    "範例輸入說明:",
    "2 (輸入2個圖形)",
    "R 4 6 (輸入矩形，length=4，width=6)",
    "S 3 (輸入正方型，edge=3)",
    "",
    "",
    "【輸出說明】",
    "第一行輸出第一個圖形的周長與面積，字元間以空格符號相隔。",
    "第二行輸出第二個圖形的周長與面積，",
    "以此類推，直到N行。",
    "最後一行輸出圖形的周長總和與面積總和。",
    "",
    "範例輸出說明:",
    "20.00 24.00 (周長=(4+6)*2=20，面積=4*6=24)",
    "12.00 9.00 (周長=3*4=12，面積=3*3= 9)",
    "32.00 33.00 (周長總和=32，面積綜合=33)",
    "",
    "備註：各個圖形的周長及面積需四捨五入到小數點後第2位，總和請先加總好再四捨五入。"
  ],
  "testcase": {
    "codeType": 1,
    "cases": [
      {
        "input": [
          "2",
          "R 4 6",
          "S 3"
        ],
        "output": [
          "20.00 24.00",
          "12.00 9.00",
          "32.00 33.00"
        ]
      },
      {
        "input": [
          "3",
          "C 3",
          "S 4",
          "T 3 2 2"
        ],
        "output": [
          "18.84 28.26",
          "16.00 16.00",
          "7.00 1.98",
          "41.84 46.24"
        ]
      },
      {
        "input": [
          "4",
          "T 2 3 4",
          "S 1",
          "R 2 3",
          "C 1"
        ],
        "output": [
          "9.00 2.90",
          "4.00 1.00",
          "10.00 6.00",
          "6.28 3.14",
          "29.28 13.04"
        ]
      },
      {
        "input": [
          "5",
          "C 4",
          "C 5",
          "S 315",
          "R 4 3",
          "T 101 200 300"
        ],
        "output": [
          "25.12 50.24",
          "31.40 78.50",
          "1260.00 99225.00",
          "14.00 12.00",
          "601.00 1735.65",
          "1931.52 101101.39"
        ]
      }
    ]
  },
  "sampleCode": [
    "#include <math.h>",
    "#include <stdio.h>",
    "#include <string.h>",
    "#include <stdlib.h>",
    "",
    "#define PI 3.14",
    "#define ShapeText(TYPE) \\",
    "  char name[10]; \\",
    "  double (*perimeter)(struct TYPE*); \\",
    "  double (*area)(struct TYPE*)",
    "",
    "",
    "typedef struct shape_s {",
    "  ShapeText(shape_s);",
    "} shape_t;",
    "",
    "// Circle Part",
    "typedef struct circle_s {",
    "  ShapeText(circle_s);",
    "  double radius;",
    "} circle_t;",
    "",
    "double CirclePerimeter(circle_t *obj) {",
    "  return 2 * PI * obj->radius;",
    "}",
    "",
    "double CircleArea(circle_t *obj) {",
    "  return PI * pow(obj->radius, 2);",
    "}",
    "",
    "void CircleInit(circle_t *obj, double radius) {",
    "  strcpy(obj->name, \"Circle\");",
    "  obj->radius = radius;",
    "  obj->perimeter = CirclePerimeter;",
    "  obj->area = CircleArea;",
    "  return;",
    "}",
    "",
    "// Rectangle Part",
    "typedef struct rectangle_s {",
    "  ShapeText(rectangle_s);",
    "  double length, width;",
    "} rectangle_t;",
    "",
    "double RectanglePerimeter(rectangle_t *obj) {",
    "  return 2 * (obj->width + obj->length);",
    "}",
    "",
    "double RectangleArea(rectangle_t *obj) {",
    "  return obj->width * obj->length;",
    "}",
    "",
    "void RectangleInit(rectangle_t *obj, double length, double width) {",
    "  strcpy(obj->name, \"Rectangle\");",
    "  obj->length = length;",
    "  obj->width = width;",
    "  obj->perimeter = RectanglePerimeter;",
    "  obj->area = RectangleArea;",
    "  return;",
    "}",
    "",
    "// Square Part",
    "typedef struct square_s {",
    "  ShapeText(square_s);",
    "  double edge;",
    "} square_t;",
    "",
    "double SquarePerimeter(square_t *obj) {",
    "  return 4 * obj->edge;",
    "}",
    "",
    "double SquareArea(square_t *obj) {",
    "  return pow(obj->edge, 2);",
    "}",
    "",
    "void SquareInit(square_t *obj, double edge) {",
    "  strcpy(obj->name, \"Square\");",
    "  obj->edge = edge;",
    "  obj->perimeter = SquarePerimeter;",
    "  obj->area = SquareArea;",
    "  return;",
    "}",
    "",
    "// Triangle Part",
    "typedef struct triangle_s {",
    "  ShapeText(triangle_s);",
    "  double edge1, edge2, edge3;",
    "} triangle_t;",
    "",
    "double TrianglePerimeter(triangle_t *obj) {",
    "  return obj->edge1 + obj->edge2 + obj->edge3;",
    "}",
    "",
    "double TriangleArea(triangle_t *obj) {",
    "  double s = obj->perimeter(obj) / 2;",
    "  return sqrt(s * (s-obj->edge1) * (s-obj->edge2) * (s-obj->edge3));",
    "}",
    "",
    "void TriangleInit(triangle_t *obj, double edge1, double edge2, double edge3) {",
    "  strcpy(obj->name, \"Triangle\");",
    "  obj->edge1 = edge1;",
    "  obj->edge2 = edge2;",
    "  obj->edge3 = edge3;",
    "  obj->perimeter = TrianglePerimeter;",
    "  obj->area = TriangleArea;",
    "  return;",
    "}",
    "",
    "void InputShape(shape_t **obj) {",
    "  char type;",
    "  scanf(\"%c\", &type);",
    "",
    "  double num1, num2, num3;",
    "",
    "  if (type == 'R') {",
    "    scanf(\"%lf\", &num1);",
    "    scanf(\"%lf\", &num2);",
    "",
    "    *obj = (shape_t *) malloc(sizeof(rectangle_t));",
    "    RectangleInit((rectangle_t *) *obj, num1, num2);",
    "  }",
    "",
    "  if (type == 'C') {",
    "    scanf(\"%lf\", &num1);",
    "",
    "    *obj = (shape_t *) malloc(sizeof(circle_t));",
    "    CircleInit((circle_t *) *obj, num1); ",
    "  }",
    "",
    "  if (type == 'S') {",
    "    scanf(\"%lf\", &num1);",
    "",
    "    *obj = (shape_t *) malloc(sizeof(square_t));",
    "    SquareInit((square_t *) *obj, num1); ",
    "  }",
    "",
    "  if (type == 'T') {",
    "    scanf(\"%lf\", &num1);",
    "    scanf(\"%lf\", &num2);",
    "    scanf(\"%lf\", &num3);",
    "",
    "    *obj = (shape_t *) malloc(sizeof(triangle_t));",
    "    TriangleInit((triangle_t *) *obj, num1, num2, num3);",
    "  }",
    "",
    "  getchar();",
    "}",
    "",
    "int main() {",
    "  int count;",
    "  shape_t *shapes[5];",
    "",
    "  double sumPerimeter = 0, sumArea = 0;",
    "",
    "  scanf(\"%d\", &count);",
    "  getchar();",
    "",
    "  for (int i=0; i<count; i++) {",
    "    InputShape(&shapes[i]);",
    "  }",
    "",
    "  for (int i=0; i<count; i++) {",
    "    sumArea += shapes[i]->area( shapes[i] );",
    "    sumPerimeter += shapes[i]->perimeter( shapes[i] );",
    "",
    "    printf(\"%.2lf %.2lf\\n\", ",
    "      shapes[i]->perimeter( shapes[i] ),",
    "      shapes[i]->area( shapes[i] )",
    "    );",
    "  }",
    "",
    "  printf(\"%.2lf %.2lf\\n\", sumPerimeter, sumArea);",
    "",
    "  return 0;",
    "}"
  ]
}