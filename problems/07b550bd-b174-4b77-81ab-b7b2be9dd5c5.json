{
  "uuid": "07b550bd-b174-4b77-81ab-b7b2be9dd5c5",
  "title": "35. 多項式相加",
  "createDate": 1748879940000,
  "collections": [
    "eb097620-6eca-4b6b-9bc3-f7adb2b5e94d"
  ],
  "problem": [
    "本題必須使用Link List實作，否則不予計分。",
    "題目給定兩個多項式，請輸出兩個多項式相加的結果。",
    "",
    "多項式運算結果輸出規範:",
    "1. 輸出計算後從最高次方到0次方的結果",
    "2. 每一項須輸出係數、x、x的次方數，輸出格式如下:",
    "I.\tx的次方數 > 1，輸出ax^k (a為係數，k為次方數)",
    "II.\tx的次方數 = 1，輸出ax (a為係數)",
    "III.\tx的次方數 = 0，輸出a (a為係數)",
    "IV.\t如果所有係數都為0，則該行輸出0",
    "正負號規範:",
    "I.\t若該項係數為0，不輸出該項",
    "II.\t若該項的次方數不為多項式的最高次方數，則該項根據係數值的正負數輸出對應的 \"+\" 或 \"-\"",
    "III.\t若該項的係數值為1或-1，則不輸出係數值，僅輸出對應的 \"+\" 或 \"-\"",
    "",
    "【輸入說明】",
    "輸入共兩行，每行各代表一個多項式。",
    "每一行輸入 n 個整數，第一個數字代表多項式中 n-1次方項的係數，第 n 個代表多項式中 0 次方項的係數。",
    "",
    "範例輸入說明:",
    "2 3 0 1 -1  (代表輸入的多項式為2x^4 + 3x^3 + x -1)",
    "1 0 -1 4 -3 2  (代表輸入的多項式為x^5 - x^3 + 4x^2 - 3x +2)",
    "",
    "【輸出說明】",
    "輸出兩個多項式相加的結果",
    "",
    "x^5+2x^4+2x^3+4x^2-2x+1 (2x^4 + 3x^3 + x - 1 + x^5 - x^3 + 4x^2 - 3x + 2的結果)"
  ],
  "testcase": {
    "codeType": 1,
    "cases": [
      {
        "input": [
          "2 3 0 1 -1",
          "1 0 -1 4 -3 2"
        ],
        "output": [
          "x^5+2x^4+2x^3+4x^2-2x+1"
        ]
      },
      {
        "input": [
          "-4 6 -1 9",
          "7 -2 3 -5"
        ],
        "output": [
          "3x^3+4x^2+2x+4"
        ]
      },
      {
        "input": [
          "4 -1 2 -9",
          "7 1 6 -1 5"
        ],
        "output": [
          "7x^4+5x^3+5x^2+x-4"
        ]
      },
      {
        "input": [
          "3 5 4 2 9",
          "-3 -5 -4 -2 -9"
        ],
        "output": [
          "0"
        ]
      }
    ]
  },
  "sampleCode": [
    "#include <stdio.h>",
    "#include <stdlib.h>",
    "#include <string.h>",
    "",
    "typedef struct node_s {   //定義 node_t",
    "  int data;               // struct node_s == node_t",
    "  struct node_s *next;",
    "} node_t;                 // node_t * == nodep_t",
    "",
    "typedef node_t * nodep_t; // 定義 nodep_t",
    "",
    "int length(nodep_t array) {",
    "  int index = 0;",
    "  ",
    "  while (array != NULL) {",
    "    index ++;",
    "    array = array->next;",
    "  }",
    "",
    "  return index;",
    "}",
    "",
    "nodep_t create(int data) { //造出 newNode",
    "  nodep_t newNode;         // newNode是指向 node_t 的指標變數",
    "",
    "  newNode=(nodep_t) malloc(sizeof(node_t)); //配置記憶體空間",
    "  newNode->data=data;",
    "  newNode->next=NULL;",
    "",
    "  return newNode; //將新 node指標回傳",
    "}",
    "",
    "nodep_t *iterate(nodep_t *start, int offset) {",
    "  if (offset == 0) {",
    "    return start;",
    "  }",
    "",
    "  nodep_t current = *start;",
    "",
    "  for (int i=0; i<offset-2; i++) {",
    "    if (current == NULL) {",
    "      printf(\"Index out of range (0...%d, %d)\\n\", i-1, offset);",
    "      return NULL;",
    "    }",
    "    current = current->next;",
    "  }",
    "",
    "  return &(current->next);",
    "}",
    "",
    "void insert(nodep_t *array, nodep_t item, int index) {",
    "  if ((*array) == NULL) {",
    "    *array = item;",
    "    return;",
    "  }",
    "",
    "  if (index == 0) {",
    "    item->next = *array;",
    "    *array = item;",
    "    return;",
    "  } ",
    "",
    "  nodep_t *current = iterate(array, index);",
    "",
    "  if (*current == NULL) {",
    "    printf(\"ERROR INSERTING\\n\");",
    "    return;",
    "  }",
    "  ",
    "  item->next = (*current)->next;",
    "  (*current)->next = item;",
    "",
    "  return;",
    "} ",
    "",
    "void printList(nodep_t *array) {",
    "  nodep_t current = *array;",
    "",
    "  int index = 0;",
    "  while (current != NULL) {",
    "    printf(\"[%2d] %d\\n\", index, current->data);",
    "    current = current->next;",
    "    index++;",
    "  }",
    "",
    "  printf(\"Print complete. (%d items)\\n\", index);",
    "}",
    "",
    "void handleInput(nodep_t *start) {",
    "  char buf[50];",
    "  int number, index=0;",
    "",
    "  nodep_t node; ",
    "",
    "  fgets(buf, 50, stdin);",
    "  while (1) {",
    "    sscanf(buf+index, \"%d\", &number);",
    "    node = create(number);",
    "    insert(start, node, 0);",
    "",
    "    while(buf[index++] != ' ') {",
    "      if (buf[index] == '\\0')",
    "        return;",
    "    }",
    "  }",
    "}",
    "",
    "void printNumber(int number, char withSign, char hide1) {",
    "  if (withSign) {",
    "    if (number == 1 && hide1) {",
    "      printf(\"+\");",
    "      return;",
    "    }",
    "",
    "    printf(\"%s\", number > 0 ? \"+\" : \"\");",
    "    ",
    "    printf(\"%d\", number);",
    "    ",
    "",
    "  } else {",
    "    if (number == 1 && hide1) {",
    "      return;",
    "    }",
    "    if (number == -1 && hide1) {",
    "      printf(\"-\");",
    "      return;",
    "    } ",
    "",
    "    printf(\"%d\", number);",
    "  }",
    "",
    "}",
    "",
    "int main() {",
    "  nodep_t polynimial1 = NULL;",
    "  nodep_t polynimial2 = NULL;",
    "  nodep_t result = NULL;",
    "",
    "  handleInput(&polynimial1);",
    "  handleInput(&polynimial2);",
    "",
    "  nodep_t pol1 = polynimial1, ",
    "          pol2 = polynimial2;",
    "  int tmp;",
    "",
    "  while (pol1 != NULL || pol2 != NULL) {",
    "    tmp = ((pol1 == NULL) ? 0 : pol1->data) + ",
    "          ((pol2 == NULL) ? 0 : pol2->data) ;",
    "",
    "    nodep_t newNode = create(tmp);",
    "    insert(&result, newNode, 0);",
    "",
    "    if (pol1 != NULL) {",
    "      pol1 = pol1->next;",
    "    }",
    "",
    "    if (pol2 != NULL) {",
    "      pol2 = pol2->next;",
    "    }",
    "",
    "  }",
    "",
    "  // printList(&result);",
    "  ",
    "  int len = length(result);",
    "  int flag = 0;",
    "",
    "  for (int i=0; i<len; i++) {",
    "    int times = len-i-1;",
    "    int current = result->data;",
    "    result = result->next;",
    "",
    "    if (i == len-1) {",
    "      printNumber(current, flag, 0);",
    "      continue;",
    "    }",
    "",
    "    if (current == 0) {",
    "      continue;",
    "    }",
    "",
    "    flag = 1;",
    "",
    "    printNumber(current, i!=0, 1);",
    "",
    "    if (i == len-2) {",
    "      printf(\"x\");",
    "    } else if (i == len-1) {",
    "      printf(\"\");",
    "    } else {",
    "      printf(\"x^%d\", times);",
    "    }",
    "",
    "  }",
    "",
    "  return 0;",
    "}"
  ]
}