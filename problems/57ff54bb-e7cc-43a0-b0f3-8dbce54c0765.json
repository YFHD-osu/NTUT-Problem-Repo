{
  "uuid": "57ff54bb-e7cc-43a0-b0f3-8dbce54c0765",
  "title": "20. 骰子",
  "createDate": 1744027200000,
  "collections": [
    "3e78a29a-20d2-49c6-8f99-25d7491caebd"
  ],
  "problem": [
    "十八骰子是一種常見的擲骰子遊戲,用四顆骰子計點。四顆一開始都是點數 1 朝上,點數 4 朝前,點數 2 朝右 (如下圖所示),骰子展開如下圖所示。",
    "<img src='https://i.imgur.com/BpedWYI.png'>",
    "",
    "骰子操作方式:",
    "1 表示向前滾一次。(滾完之後，點數3朝上)",
    "2 表示向後滾一次。(滾完之後，點數4朝上)",
    "3 表示向右滾一次。(滾完之後，點數5朝上)",
    "4 表示向左滾一次。(滾完之後，點數2朝上)",
    "",
    "計算點數方法:",
    "(1)若四顆點數均相同,稱一色,計18點,例如6, 6, 6, 6 或 3, 3, 3, 3。",
    "(2)若四顆點數均不同;或有三顆點數相同,一顆不同,計 0點,例如 1, 2, 3, 4 或 2, 2, 2, 6。",
    "(3)若兩顆點數相同,另兩顆點數也相同,但兩組兩顆點數不同,則點數計算為 - 加總兩顆較 大點數,例如 2, 2, 5, 5,加總兩顆較大點數為 5+5=10點。",
    "(4)若兩顆點數相同,另兩顆點數不同,則點數計算為加總兩顆不同點數,例如 2, 2, 4, 5,加總兩顆不同點數為 4+5=9點。",
    "",
    "【輸入說明】",
    "第一行輸入正整數N，表示對骰子的操作次數，(1<=N<=10)",
    "第二行~第N+1行輸入正整數a、b、c、d，a代表第一顆骰子的操作方式，b代表第二顆骰子的操作方式，依此類推，(1<=a,b,c,d<=4)",
    "",
    "範例輸入說明:",
    "2 (骰子的操作次數為2)",
    "1 2 3 4 (第一次操作，對第一顆骰子執行向前滾、對第二顆骰子執行向後滾、對第三顆骰子執行向右滾、對第四顆骰子執行向左滾)",
    "4 3 2 1 (第二次操作，對第一顆骰子執行向左滾、對第二顆骰子執行向右滾、對第三顆骰子執行向後滾、對第四顆骰子執行向前滾)",
    "",
    "【輸出說明】",
    "第一行輸出根據計算點數方法得出的分數",
    "",
    "範例輸出說明:",
    "0 (4顆骰子最後的點數為2、5、4、3，根據計分規則，得分為0)"
  ],
  "testcase": {
    "codeType": 1,
    "cases": [
      {
        "input": [
          "4",
          "1 2 3 4",
          "1 2 3 4",
          "1 2 3 4",
          "1 2 3 4"
        ],
        "output": [
          "18"
        ]
      },
      {
        "input": [
          "2",
          "1 2 3 4",
          "1 2 3 4"
        ],
        "output": [
          "18"
        ]
      },
      {
        "input": [
          "2",
          "1 2 3 4",
          "4 3 2 1"
        ],
        "output": [
          "0"
        ]
      },
      {
        "input": [
          "3",
          "1 2 3 4",
          "1 2 3 4",
          "3 1 4 2"
        ],
        "output": [
          "10"
        ]
      },
      {
        "input": [
          "2",
          "1 2 3 4",
          "2 3 1 1"
        ],
        "output": [
          "6"
        ]
      },
      {
        "input": [
          "6",
          "1 2 3 4",
          "4 3 2 1",
          "4 1 2 3",
          "3 2 1 4",
          "2 2 2 3",
          "4 4 1 1"
        ],
        "output": [
          "0"
        ]
      }
    ]
  },
  "sampleCode": [
    "#include <stdio.h>",
    "",
    "int count(int item, int *arr);",
    "char contains(int item, int *arr);",
    "int max(int *arr);",
    "char contains(int item, int *arr);",
    "int count(int item, int *arr);",
    "",
    "short dice[4][6] = {",
    "  {1, 2, 6, 5, 4, 3},",
    "  {1, 2, 6, 5, 4, 3},",
    "  {1, 2, 6, 5, 4, 3},",
    "  {1, 2, 6, 5, 4, 3}",
    "};",
    "",
    "void turnR(short *dice) {",
    "  short tmp = dice[3];",
    "  for (int i=3; i>0; i--) {",
    "    dice[i] = dice[i-1];",
    "  }",
    "  dice[0] = tmp;",
    "}",
    "",
    "void turnL(short *dice) {",
    "  short tmp = dice[0];",
    "  for (int i=0; i<3; i++) {",
    "    dice[i] = dice[i+1];",
    "  }",
    "  dice[3] = tmp;",
    "}",
    "",
    "void turnB(short *dice) {",
    "  int tmp = dice[0];",
    "  dice[0] = dice[4];",
    "  dice[4] = dice[2];",
    "  dice[2] = dice[5];",
    "  dice[5] = tmp;",
    "}",
    "",
    "void turnF(short *dice) {",
    "  int tmp = dice[0];",
    "  dice[0] = dice[5];",
    "  dice[5] = dice[2];",
    "  dice[2] = dice[4];",
    "  dice[4] = tmp;",
    "}",
    "",
    "int main() {",
    "  int times;",
    "  scanf(\"%d\", &times);",
    "  getchar();",
    "",
    "  int operation;",
    "",
    "  while (times-- > 0) {",
    "    for (int i=0; i<4; i++) {",
    "      scanf(\"%d\", &operation);",
    "",
    "      switch (operation) {",
    "        case 1:",
    "          turnF(dice[i]);",
    "          break;",
    "",
    "        case 2:",
    "          turnB(dice[i]);",
    "          break;",
    "",
    "        case 3:",
    "          turnR(dice[i]);",
    "          break;",
    "",
    "        case 4:",
    "          turnL(dice[i]);",
    "          break;",
    "      }",
    "    }",
    "    getchar();",
    "    ",
    "  }",
    "",
    "  int analyse[4];",
    "",
    "  int points[4] = {dice[0][0], dice[1][0], dice[2][0], dice[3][0]};",
    "",
    "  for (int i=0; i<4; i++) ",
    "    analyse[i] = count(points[i], points);",
    "  ",
    "  if (contains(4, analyse)) {",
    "    printf(\"18\\n\");",
    "    return 0;",
    "  }",
    "",
    "  if (contains(2, analyse) && !contains(1, analyse)) {",
    "    printf(\"%d\\n\", max(points)*2);",
    "    return 0;",
    "  }",
    "",
    "  if (contains(2, analyse) && contains(1, analyse)) {",
    "    int pts = 0;",
    "    for (int i=0; i<4; i++) {",
    "      if (analyse[i] != 1) continue;",
    "      pts += points[i];",
    "    }",
    "    printf(\"%d\\n\", pts);",
    "    return 0;",
    "  }",
    "",
    "  // if (contains(3, analyse) || ( contains(1, analyse) && !contains(2, analyse))) {",
    "  printf(\"0\\n\");",
    "  // }",
    "  return 0;",
    "}",
    "",
    "int count(int item, int *arr) {",
    "  short sum = 0;",
    "",
    "  for (int i=0; i<4; i++) {",
    "    if (arr[i] == item) {",
    "      sum++;",
    "    }",
    "  }",
    "",
    "  return sum;",
    "}",
    "",
    "char contains(int item, int *arr) {",
    "  short sum = 0;",
    "",
    "  for (int i=0; i<4; i++) {",
    "    if (arr[i] == item) {",
    "      return 1;",
    "    }",
    "  }",
    "",
    "  return 0;",
    "}",
    "",
    "int max(int *arr) {",
    "  int max = arr[0];",
    "",
    "  for (int i=1; i<4; i++) {",
    "    if (arr[i] > max) max = arr[i];",
    "  }",
    "",
    "  return max;",
    "}"
  ]
}