{
  "uuid": "0fb20f30-fb48-40b7-bad3-4dd4c69c6348",
  "title": "36. 統一發票",
  "createDate": 1750302596251,
  "collections": [
    "9b99bc6a-12d6-4347-87c5-9cc2082e7508"
  ],
  "problem": [
    "統一發票總共有8碼數字",
    "獎項有:",
    "特別獎(Special Prize)：統一發票八位數號碼與中獎號碼完全相同者，獎金新臺幣一千萬元",
    "特獎(Grand Prize)：統一發票八位數號碼與中獎號碼完全相同者，獎金新臺幣二百萬元",
    "其他各獎：",
    "（一）頭獎(1st Prize)：統一發票八位數號碼與中獎號碼完全相同者，獎金新臺幣二十萬元",
    "（二）二獎(2nd Prize)：統一發票末七位數號碼與中獎號碼之末七位完全相同者，獎金新臺幣四萬元",
    "（三）三獎(3rd Prize)：統一發票末六位數號碼與中獎號碼之末六位完全相同者，獎金新臺幣一萬元",
    "（四）四獎(4th Prize)：統一發票末五位數號碼與中獎號碼之末五位完全相同者，獎金新臺幣四千元",
    "（五）五獎(5th Prize)：統一發票末四位數號碼與中獎號碼之末四位完全相同者，獎金新臺幣一千元",
    "（六）六獎(6th Prize)：統一發票末三位數號碼與中獎號碼之末三位完全相同者，獎金新臺幣二百元",
    "總共會有5組中獎號碼分別是1組特別獎號碼、1組特獎號碼、3組普通獎號碼",
    "中獎期數日期範圍為第一個月的1日到第二個月的最後一日",
    "例 2024-09,10 日期範圍為9月1日至10月31日",
    "發票資訊總共會有統一發票號碼(共有8碼)、店家統一編號(共有8碼)、購買日期(YYYY-MM-DD)、購買金額，4項資訊，請先檢查發票是否在中獎期數範圍內及格式是否正確並輸出結果，如果是在範圍內並且格式正確，找出中獎發票並統計哪家店家開出最多中獎發票以及哪張中獎發票扣除購買金額有最多獲利(獎金扣除購買金額後的利潤)。",
    "【輸入說明】",
    "第1行：5組中獎號碼(第1組為特別獎中獎號碼、第2組為特獎中獎號碼、第3至5組為普通獎項中獎號碼有頭獎至六獎)、中獎期數,以空格隔開(字串S)",
    "第2行：數字n表示有n張發票(整數n)",
    "第3至n+2行：輸入統一發票號碼、店家統一編號、購買日期、購買金額,以空格隔開(字串)",
    "範例輸入說明:",
    "Sample Input:",
    "28630525 90028580 27435934 39666605 02550031 2024-09,10(字串S)",
    "5(整數n)",
    "19586605 04595257 2024-09-15 120(字串)",
    "34567031 10458575 2024-10-24 255(字串)",
    "23456934 04595257 2024-12-01 300(字串)",
    "900285801 10458574 2024-09-22 100(字串)",
    "21255934 04595257 2024-10-05 10000(字串)",
    "【輸出說明】",
    "第1至n行：發票是否在中獎期數範圍內及格式是否正確，在範圍內並且格式正確",
    "，輸出贏得獎項及金額",
    "第n+1行:如果未有發票中獎，輸出沒有任何發票中獎",
    "有發票中獎，則輸出開立最多中獎發票的店家並且輸出中了幾張",
    "第n+2行: 有發票中獎時，輸出最多獲利的發票",
    "Sample Output:",
    "19586605 won: 5th Prize: 1000 TWD Profit: 880 TWD (中五獎)",
    "34567031 won: 6th Prize: 200 TWD Profit: -55 TWD (中六獎)",
    "23456934 is outside the prize period. (時間不在期數範圍內)",
    "900285801 has an invalid format. (發票號碼不正確)",
    "21255934 won: 5th Prize: 1000 TWD Profit: -9000 TWD (中五獎)",
    "Store 04595257 opened the most winning invoices: 2(店家04595257開的發票中獎最多張)",
    "Invoice with the highest profit: 19586605, from store 04595257, purchase date 2024-09-15, total prize 1000 TWD, profit 880 TWD(發票19586605的獲利最高)"
  ],
  "testcase": {
    "codeType": 0,
    "cases": [
      {
        "input": [
          "28630525 90028580 27435934 39666605 02550031 2024-09,10",
          "5",
          "19586605 04595257 2024-09-15 120",
          "34567031 10458575 2024-10-24 255",
          "23456934 04595257 2024-12-01 300",
          "900285801 10458574 2024-09-22 100",
          "21255934 04595257 2024-10-05 10000"
        ],
        "output": [
          "19586605 won: 5th Prize: 1000 TWD Profit: 880 TWD",
          "34567031 won: 6th Prize: 200 TWD Profit: -55 TWD",
          "23456934 is outside the prize period.",
          "900285801 has an invalid format.",
          "21255934 won: 5th Prize: 1000 TWD Profit: -9000 TWD",
          "Store 04595257 opened the most winning invoices: 2",
          "Invoice with the highest profit: 19586605, from store 04595257, purchase date 2024-09-15, total prize 1000 TWD, profit 880 TWD"
        ]
      },
      {
        "input": [
          "86396830 53267964 39635796 98978859 55566054 2024-05,06",
          "3",
          "13572468 10458570 2024-05-05 20",
          "75889409 04595252 2024-06-19 1500",
          "989788599 10458575 2024-06-06 3900"
        ],
        "output": [
          "13572468 did not win anything.",
          "75889409 did not win anything.",
          "989788599 has an invalid format.",
          "No invoices won any prize."
        ]
      },
      {
        "input": [
          "38039158 08276859 32110911 84289408 13446901 2024-07,08",
          "4",
          "84289408 54595391 2024-08-31 12000",
          "08276859 10458575 2024-07-07 450000",
          "13446901 54595391 2024-08-17 15820",
          "52110911 54595391 2024-07-23 1800"
        ],
        "output": [
          "84289408 won: 1st Prize: 200000 TWD Profit: 188000 TWD",
          "08276859 won: Grand Prize: 2000000 TWD Profit: 1550000 TWD",
          "13446901 won: 1st Prize: 200000 TWD Profit: 184180 TWD",
          "52110911 won: 2nd Prize: 40000 TWD Profit: 38200 TWD",
          "Store 54595391 opened the most winning invoices: 3",
          "Invoice with the highest profit: 08276859, from store 10458575, purchase date 2024-07-07, total prize 2000000 TWD, profit 1550000 TWD"
        ]
      },
      {
        "input": [
          "44140251 14715309 86562747 79171152 77925523 2024-03,04",
          "3",
          "441402515 96922355 2024-03-28 118",
          "19171152 04595257 2024-04-28 4500",
          "77928523 96922355 2024-02-28 138"
        ],
        "output": [
          "441402515 has an invalid format.",
          "19171152 won: 2nd Prize: 40000 TWD Profit: 35500 TWD",
          "77928523 is outside the prize period.",
          "Store 04595257 opened the most winning invoices: 1",
          "Invoice with the highest profit: 19171152, from store 04595257, purchase date 2024-04-28, total prize 40000 TWD, profit 35500 TWD"
        ]
      }
    ]
  },
  "sampleCode": [
    "def main() -> None:",
    "  win = input().split()",
    "",
    "  invoice = [input().split() for _ in range(int(input()))]",
    "",
    "  name = {8: \"1st\", 7: \"2nd\", 6: \"3rd\", 5: '4th', 4: '5th', 3: '6th', 2: 'Special', 1: 'Grand'}",
    "  prize = {8: 200000, 7: 40000, 6: 10000, 5: 4000, 4: 1000, 3: 200, 2: 10000000, 1: 2000000}",
    "",
    "  maxPrice = 0",
    "  maxInvoice = []",
    "",
    "  store = {}",
    "",
    "  for inv in invoice:",
    "    if not isDateValid(inv[2], win[-1]):",
    "      print(f\"{inv[0]} is outside the prize period.\")",
    "      continue",
    "    ",
    "    if not isNumberValid(inv[0]):",
    "      print(f\"{inv[0]} has an invalid format.\")",
    "      continue",
    "",
    "    prizeType = fetchPrize(inv[0], win[:-1])",
    "",
    "    if prizeType:",
    "      earn = prize[prizeType] - int(inv[-1])",
    "      print(f\"{inv[0]} won: {name[prizeType]} Prize: {prize[prizeType]} TWD Profit: {earn} TWD\")",
    "",
    "      store[inv[1]] = store.get(inv[1], 0) + 1",
    "",
    "      if earn > maxPrice:",
    "        maxInvoice = inv",
    "        maxPrice = earn",
    "",
    "      continue",
    "    ",
    "    print(f\"{inv[0]} did not win anything.\")",
    "",
    "  if maxPrice == 0:",
    "    print(\"No invoices won any prize.\")",
    "    return",
    "  ",
    "  most = sorted(store.items(), key=lambda e: e[1], reverse=True)[0]",
    "  print(f\"Store {most[0]} opened the most winning invoices: {most[1]}\")",
    "  ",
    "  prizeType = fetchPrize(maxInvoice[0], win[:-1])",
    "  print(f\"Invoice with the highest profit: {maxInvoice[0]}, from store {maxInvoice[1]}, purchase date {maxInvoice[2]}, total prize {prize[prizeType]} TWD, profit {prize[prizeType] - int(maxInvoice[-1])} TWD\")",
    "  ",
    "  ",
    "def isDateValid(invoice: str, date: str) -> bool:",
    "  info = date.split('-')",
    "  # print([f\"{info[0]}-{y}-\" for y in info[-1].split(',')])",
    "  return any(f\"{info[0]}-{y}-\" in invoice for y in info[-1].split(','))",
    "",
    "def isNumberValid(invoice: str) -> bool:",
    "  return invoice.isdigit() and len(invoice) == 8",
    "",
    "def fetchPrize(invoice: str, win: list) -> int:",
    "  if invoice == win[0]:",
    "    return 2",
    "  ",
    "  if invoice == win[1]:",
    "    return 1",
    "  ",
    "  length = 8",
    "  while length > 2:",
    "    for code in win[2:]:",
    "      if invoice[-length:] == code[-length:]:",
    "        return length",
    "      ",
    "    length -= 1",
    "",
    "  return 0",
    "",
    "if __name__ == \"__main__\":",
    "  main()"
  ]
}