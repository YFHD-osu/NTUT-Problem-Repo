{
  "uuid": "73a5c366-7f4c-482d-8ab7-ef427a5c1607",
  "title": "8. 判斷何種三角形",
  "createDate": 1741795140000,
  "collections": [
    "8d3b2553-11f4-4605-8795-a54879b55525"
  ],
  "problem": [
    "輸入一個正整數n，代表n個三角形，接著有n行輸入，每一行都會有3個正整數a、b、c，以空白區隔,判斷每一個三角形為正三角、等腰、鈍角、銳角、直角或是無法構成三角形，並輸出結果(若符合多種三角形則按照輸出格式編號順序輸出)，每個三角形的結果輸出以n個*區隔。",
    "",
    "判別方法如下:",
    "1. 不能成為三角形：任兩邊和不大於第三邊，或任一邊長不大於0。",
    "2. 正三角形：三個邊相等。",
    "3. 等腰三角形：任兩邊相等。",
    "4. 鈍角三角形: 最長邊平方大於兩短邊平方和。",
    "5. 銳角三角形: 最長邊平方小於兩短邊平方和。",
    "6. 直角三角形: 最長邊平方等於兩短邊平方和。",
    "【輸入說明】",
    "第一航輸入整數(int) n",
    "第二行輸入三個整數(int) a b c",
    "",
    "",
    "範例輸入說明:",
    "Sample Input:",
    "2",
    "10 10 5",
    "2 2 2",
    "",
    "【輸出說明】",
    "若符合多種三角形則按照輸出格式編號順序輸出",
    "輸出格式如下：",
    "1. 不能成為三角形：輸出Not Triangle。",
    "2. 正三角形：輸出Equilateral Triangle。",
    "3. 等腰三角形：輸出Isosceles Triangle",
    "4. 鈍角三角形:輸出Obtuse Triangle。",
    "5. 銳角三角形: 輸出Acute Triangle。",
    "6. 直角三角形:輸出Right Triangle。",
    "",
    "範例輸出說明:",
    "Isosceles Triangle",
    "Acute Triangle",
    "**",
    "Equilateral Triangle",
    "Isosceles Triangle",
    "Acute Triangle"
  ],
  "testcase": {
    "codeType": 1,
    "cases": [
      {
        "input": [
          "2",
          "5 2 2",
          "2 2 5"
        ],
        "output": [
          "Not Triangle",
          "**",
          "Not Triangle"
        ]
      },
      {
        "input": [
          "1",
          "6 6 6"
        ],
        "output": [
          "Equilateral Triangle",
          "Isosceles Triangle",
          "Acute Triangle"
        ]
      },
      {
        "input": [
          "3",
          "8 11 5",
          "6 8 9",
          "3 7 12"
        ],
        "output": [
          "Obtuse Triangle",
          "***",
          "Acute Triangle",
          "***",
          "Not Triangle"
        ]
      },
      {
        "input": [
          "4",
          "1 1 1",
          "5 12 13",
          "12 13 15",
          "3 4 5"
        ],
        "output": [
          "Equilateral Triangle",
          "Isosceles Triangle",
          "Acute Triangle",
          "****",
          "Right Triangle",
          "****",
          "Acute Triangle",
          "****",
          "Right Triangle"
        ]
      }
    ]
  },
  "sampleCode": [
    "#include <stdio.h>",
    "",
    "int count;",
    "int dimension[3] = {};",
    "",
    "int max(int dim[3]) {",
    "  int index = 0;",
    "  int _result = dim[0];",
    "  for (int i=0; i<3 ;i++) {",
    "    if (dim[i] < _result) continue;",
    "    index = i;",
    "    _result = dim[i];",
    "  }",
    "",
    "  return index;",
    "}",
    "",
    "int min(int dim[3]) {",
    "  int index = 2;",
    "  int _result = (1 << 30);",
    "  for (int i=2; i>0 ;i--) {",
    "    if (dim[i] > _result) continue;",
    "    index = i;",
    "    _result = dim[i];",
    "  }",
    "",
    "  return index;",
    "}",
    "",
    "int sum(int dim[3]) {",
    "  int _result = 0;",
    "  for (int i=0; i<3 ;i++) {",
    "    _result += dim[i];",
    "  }",
    "",
    "  return _result;",
    "}",
    "",
    "short determine(int dim[3]) {",
    "  int _sum = sum(dim);",
    "",
    "  int _max = dim[max(dim)];",
    "  int _min = dim[min(dim)];",
    "  int _mid = dim[3 - max(dim) - min(dim)];",
    "",
    "  // printf(\"%d %d %d \\n\", max(dim), _mid, min(dim));",
    "",
    "  if (_sum - _max <= _max) {",
    "    printf(\"Not Triangle\\n\");",
    "    return 0;",
    "  }",
    "  ",
    "  if (_max == _min) {",
    "    printf(\"Equilateral Triangle\\n\");",
    "  }",
    "",
    "  if ((_sum - _max) == _mid * 2 ||",
    "      (_sum - _min) == _mid * 2 ",
    "  ) {",
    "    printf(\"Isosceles Triangle\\n\");",
    "  }",
    "",
    "  if (_max*_max > _mid*_mid + _min*_min) {",
    "    printf(\"Obtuse Triangle\\n\");",
    "  }",
    "  ",
    "  if (_max*_max < _mid*_mid + _min*_min) {",
    "    printf(\"Acute Triangle\\n\");",
    "  }",
    "",
    "  if (_max*_max == _mid*_mid + _min*_min) {",
    "    printf(\"Right Triangle\\n\");",
    "  }",
    "}",
    "",
    "int main() {",
    "  scanf(\"%d\", &count);",
    "  getchar();",
    "",
    "  for (int i=0; i<count; i++) {",
    "    scanf(\"%d %d %d\", &dimension[0], &dimension[1], &dimension[2]);",
    "    // getchar();",
    "    determine(dimension);",
    "    if (i+1 < count) {",
    "      for (int h=0 ; h<count ; h++) printf(\"*\");",
    "      printf(\"\\n\");",
    "    }",
    "  }",
    "",
    "  return 0;",
    "}"
  ]
}