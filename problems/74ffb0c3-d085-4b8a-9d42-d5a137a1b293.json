{
  "uuid": "74ffb0c3-d085-4b8a-9d42-d5a137a1b293",
  "title": "40. 唯一二元樹",
  "createDate": 1750003140000,
  "collections": [
    "eb097620-6eca-4b6b-9bc3-f7adb2b5e94d"
  ],
  "problem": [
    "請使用以下結構實作。",
    "",
    "Link List 架構:",
    "typedef struct node_s {",
    "char data;",
    "struct node_s * right, * left;",
    "} tree_t;",
    "typedef tree_t * btree;",
    "",
    "給定前序或後序以及中序，請建構唯一的Binary Tree(非二元搜尋樹)。",
    "輸出該Tree的內容，輸出順序為由上而下，由左而右印出。",
    "",
    "前序或後序以及中序代號分別為:",
    "前序代號：P",
    "中序代號：I",
    "後序代號：O",
    "",
    "【輸入說明】",
    "第一行輸入前序、中序或後序的代號。",
    "第二行輸入上一行輸入尋訪的字串結果A(1<=A的字串長度<=20)，結果皆為大寫英文字母。",
    "第三行輸入前序、中序或後序的代號。",
    "第四行輸入上一行輸入尋訪的字串結果B(1<=B的字串長度<=20)。",
    "",
    "範例輸入說明:",
    "Sample Input:",
    "P (下一行輸入前序結果)",
    "ABDHIEJKCFLMGNO (前序尋訪Tree的結果)",
    "I (下一行輸入中序結果)",
    "HDIBJEKALFMCNGO(中序尋訪Tree的結果)",
    "",
    "【輸出說明】",
    "輸出唯一二元樹的內容，輸出順序為由上而下，由左而右。",
    "",
    "Sample Output:",
    "ABCDEFGHIJKLMNO(唯一二元樹由上而下，由左而右的輸出結果)。"
  ],
  "testcase": {
    "codeType": 1,
    "cases": [
      {
        "input": [
          "P",
          "ABDHIEJKCFLMGNO",
          "I",
          "HDIBJEKALFMCNGO"
        ],
        "output": [
          "ABCDEFGHIJKLMNO"
        ]
      },
      {
        "input": [
          "I",
          "CHRONEMIA",
          "O",
          "AIMENORHC"
        ],
        "output": [
          "CHRONEMIA"
        ]
      },
      {
        "input": [
          "P",
          "MQVYBJAWZCDKXHT",
          "I",
          "YBVJQWAMCZKDHXT"
        ],
        "output": [
          "MQZVACDYJWKXBHT"
        ]
      },
      {
        "input": [
          "I",
          "MXFIPNOEAGDRL",
          "O",
          "MFIONPXDRGLAE"
        ],
        "output": [
          "EXAMPLINGFORD"
        ]
      },
      {
        "input": [
          "O",
          "EGATNIV",
          "I",
          "ITGEANV"
        ],
        "output": [
          "VINTAGE"
        ]
      }
    ]
  },
  "sampleCode": [
    "#include <stdio.h>",
    "#include <stdlib.h>",
    "#include <string.h>",
    "",
    "typedef struct node_s {",
    "  char data;",
    "  struct node_s * right, * left;",
    "} tree_t;",
    "",
    "typedef tree_t * btree;",
    "",
    "btree create(char data) {",
    "  btree node = (btree) malloc(sizeof(tree_t));",
    "  node->data = data;",
    "  node->left = node->right = NULL;",
    "  return node;",
    "}",
    "",
    "btree buildPreOrder(char *pre, char *in, int len) {",
    "  if (len == 0) ",
    "    return NULL;",
    "  ",
    "  int index = 0;",
    "  btree node = create(pre[0]);",
    "",
    "  while(in[index] != pre[0]) index ++;",
    "",
    "  node->left = buildPreOrder(pre+1, in, index);",
    "  node->right = buildPreOrder(pre+1+index, in+index+1, len-index-1);",
    "",
    "  return node;",
    "}",
    "",
    "btree buildPostOrder(char *post, char *in, int len) {",
    "  if (len == 0) ",
    "    return NULL;",
    "  ",
    "  int index = 0;",
    "  btree node = create(post[len-1]);",
    "",
    "  while(in[index] != post[len-1]) index ++;",
    "",
    "  node->left = buildPostOrder(post, in, index);",
    "  node->right = buildPostOrder(post+index, in+index+1, len-index-1);",
    "",
    "  return node;",
    "}",
    "",
    "void printLevel(btree tree, int level, int n) {",
    "  if (n != level && tree) {",
    "    printLevel(tree->left, level, n+1);",
    "    printLevel(tree->right, level, n+1);",
    "    return;",
    "  }",
    "",
    "  if (tree && tree->left)",
    "    printf(\"%c\", tree->left->data);",
    "",
    "  if (tree && tree->right)",
    "    printf(\"%c\", tree->right->data);",
    "}",
    "",
    "",
    "",
    "int main() {",
    "  char type1, type2;",
    "  char buf1[100], buf2[100];",
    "",
    "  btree tree;",
    "",
    "  scanf(\"%c\", &type1);",
    "  getchar();",
    "  scanf(\"%s\", buf1);",
    "  getchar();",
    "",
    "  scanf(\"%c\", &type2);",
    "  getchar();",
    "  scanf(\"%s\", buf2);",
    "  getchar();",
    "",
    "  if (type1 == 'I' && type2 == 'O') {",
    "    tree = buildPostOrder(buf2, buf1, strlen(buf1));",
    "  } else if (type1 == 'I' && type2 == 'P') {",
    "    tree = buildPreOrder(buf2, buf1, strlen(buf1));",
    "  } else if (type1 == 'O' && type2 == 'I') {",
    "    tree = buildPostOrder(buf1, buf2, strlen(buf1));",
    "  } else if (type1 == 'P' && type2 == 'I') {",
    "    tree = buildPreOrder(buf1, buf2, strlen(buf1));",
    "  }",
    "",
    "  printf(\"%c\", tree->data);",
    "  int lvl = 0;",
    "  while (lvl < 20) {",
    "    printLevel(tree, lvl, 0);",
    "    lvl++;",
    "  }",
    "",
    "  return 0;",
    "}"
  ]
}