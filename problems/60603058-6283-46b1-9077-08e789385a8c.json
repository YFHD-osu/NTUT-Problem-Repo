{
  "uuid": "60603058-6283-46b1-9077-08e789385a8c",
  "title": "021 疫情分析",
  "createDate": 1750301438548,
  "collections": [
    "0c60f8d2-0afe-41de-825c-683e04a370e6"
  ],
  "problem": [
    "第1行：輸入A城市人口n，n為整數，100 <= n <= 10000",
    "第2行：輸入計算期間m，m為整數，1 <= m <= 20",
    "第3行：輸入第一天的確診人數a，a為整數，1 <= a <=  n * (1 - d)",
    "第4行：輸入每位確診者在確診期間的傳染人數b，b為浮點數，0.1 <= b <= 2",
    "第5行：輸入康復天數c，c為整數，1 <= c <= 20",
    "第6行：輸入第一天A城市的免疫率d，d為浮點數，0 <= d <= 1",
    "範例輸入說明:",
    "1000（A城市人口共有1000人）",
    "10  （計算期間共10天）",
    "100 （第1天A城市中有100人確診）",
    "1.2 （確診者在染疫期間傳染給1.2個人）",
    "7  （確診者需7天才會康復）",
    "0.7 （A城市有70%的人已免疫）"
  ],
  "testcase": {
    "codeType": 0,
    "cases": [
      {
        "input": [
          "300",
          "10",
          "90",
          "1.2",
          "7",
          "0.7"
        ],
        "output": [
          "1 90 90 0",
          "2 90 0 0",
          "3 90 0 0",
          "4 90 0 0",
          "5 90 0 0",
          "6 90 0 0",
          "7 90 0 0",
          "8 0 0 90",
          "9 0 0 0",
          "10 0 0 0",
          "90"
        ]
      },
      {
        "input": [
          "450",
          "12",
          "120",
          "0.2",
          "5",
          "0.55"
        ],
        "output": [
          "1 120 120 0",
          "2 122 2 0",
          "3 124 2 0",
          "4 126 2 0",
          "5 128 2 0",
          "6 10 2 120",
          "7 8 0 2",
          "8 6 0 2",
          "9 4 0 2",
          "10 2 0 2",
          "11 0 0 2",
          "12 0 0 0",
          "130"
        ]
      },
      {
        "input": [
          "6000",
          "10",
          "1200",
          "1.5",
          "4",
          "0.75"
        ],
        "output": [
          "1 1200 1200 0",
          "2 1312 112 0",
          "3 1435 123 0",
          "4 1500 65 0",
          "5 300 0 1200",
          "6 188 0 112",
          "7 65 0 123",
          "8 0 0 65",
          "9 0 0 0",
          "10 0 0 0",
          "1500"
        ]
      },
      {
        "input": [
          "8500",
          "20",
          "950",
          "0.9",
          "10",
          "0"
        ],
        "output": [
          "1 950 950 0",
          "2 1035 85 0",
          "3 1128 93 0",
          "4 1229 101 0",
          "5 1339 110 0",
          "6 1459 120 0",
          "7 1590 131 0",
          "8 1733 143 0",
          "9 1888 155 0",
          "10 2057 169 0",
          "11 1292 185 950",
          "12 1310 103 85",
          "13 1320 103 93",
          "14 1322 103 101",
          "15 1313 101 110",
          "16 1292 99 120",
          "17 1257 96 131",
          "18 1205 91 143",
          "19 1136 86 155",
          "20 1046 79 169",
          "3103"
        ]
      },
      {
        "input": [
          "100",
          "15",
          "30",
          "2",
          "15",
          "0"
        ],
        "output": [
          "1 30 30 0",
          "2 34 4 0",
          "3 38 4 0",
          "4 43 5 0",
          "5 48 5 0",
          "6 54 6 0",
          "7 61 7 0",
          "8 69 8 0",
          "9 78 9 0",
          "10 88 10 0",
          "11 99 11 0",
          "12 100 1 0",
          "13 100 0 0",
          "14 100 0 0",
          "15 100 0 0",
          "100"
        ]
      }
    ]
  },
  "sampleCode": [
    "def main():",
    "  n = int(input()) # The popularity of the city",
    "  m = int(input()) # Calculate days",
    "  A = int(input()) # Number of new patient for today",
    "  B = float(input()) # The inflection rate",
    "  C = int(input()) # The days required to recover",
    "  D = float(input()) # The immune rate",
    "",
    "  res = calc(n, m, A, B, C, D)",
    "  print(\"%d\" % (res))",
    "",
    "# data variable stores numbers of new patient of each day ",
    "def calc(n: int, m: int, a: int, b: float, c: int, d: float, data: list=[0]) -> int:",
    "  dayIndex = len(data)",
    "",
    "  if m+1 == dayIndex:",
    "    return sum(data)",
    "",
    "  # Calculate maximum patient with today's d value",
    "  maxPatient = int(n * (1 - d))",
    "  ",
    "  # Calculate sick people until yesterday",
    "  sickPeople = sum(data) ",
    "",
    "  # Calculate recovered people until yesterday",
    "  healPeople = sum(data[:-c]) if len(data) > c else 0 ",
    "",
    "  # Calculate the number of patient yesterday",
    "  yesterdayPatient = sickPeople - healPeople",
    "",
    "  todayAdd = a",
    "",
    "  isExceed = False",
    "  if yesterdayPatient + a > maxPatient:",
    "    isExceed = True",
    "",
    "    # Add as maximum patient as possible",
    "    todayAdd = maxPatient - yesterdayPatient",
    "",
    "    # Clear added if current patient is more than maximum",
    "    todayAdd = 0 if todayAdd < 0 else todayAdd",
    "",
    "  # Calculate today's patient",
    "  todayPatient = yesterdayPatient - todayHeal + todayAdd",
    "",
    "  # Prepare for tomorrow",
    "  todayHeal = data[-c] if len(data) > c else 0",
    "",
    "  # Calculate new d value for tomorrow",
    "  immuneRate = d + todayHeal / n",
    "  immuneRate = 1 if immuneRate > 1 else immuneRate",
    "",
    "  # Calculate tomorrow's patient with new immuneRate",
    "  tomorrowSick = int(todayPatient * (b / c) * (1 - immuneRate) // 1)",
    "  tomorrowSick = 0 if isExceed else tomorrowSick",
    "  ",
    "  print(\"%d %d %d %d\"%(dayIndex, todayPatient, todayAdd, todayHeal))",
    "",
    "  return calc(n, m, tomorrowSick, b, c, immuneRate, data+[todayAdd])",
    "",
    "if __name__ == \"__main__\":",
    "  main()"
  ]
}