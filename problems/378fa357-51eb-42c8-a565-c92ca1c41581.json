{
  "uuid": "378fa357-51eb-42c8-a565-c92ca1c41581",
  "title": "15. 直線方程式",
  "createDate": 1742831940000,
  "collections": [
    "df834ace-8de1-4f4e-bdcf-8c6b348a2109"
  ],
  "problem": [
    "給定平面上兩個點座標，求直線方程式 y = mx + b，",
    "m = (y1 - y2) / (x1 - x2)",
    "b = (x2 * y1 - x1 * y2) / (x2 - x1)",
    "分數表示格式：分子/分母，例如7/3",
    "",
    "※函式傳遞參數需使用指標",
    "",
    "【輸入說明】",
    "第一行：輸入整數N，代表其後有多少筆輸入測資",
    "第二到N+1行：輸入平面上兩個點座標位置，依序為x1, y1, x2, y2，中間以空格隔開，座標皆以整數表示",
    "",
    "範例輸入：",
    "2",
    "2 -2 7 2  (x1=-2, y1=-2, x2=7, y2=2)",
    "3 -6 -4 8 (x1=3, y1=-6, x2=-4, y2=8)",
    "",
    "【輸出說明】",
    "輸出格式為y = mx + b，且m, b的值須化為最簡分數或整數",
    "若m或b為0，則該項不輸出",
    "※注意事項",
    "若m 為 1時，輸出格式應為 y = x + b，而不是 y = 1x + b",
    "若m 為 -1時，輸出格式應為 y = -x + b，而不是 y = -1x + b",
    "若m 為 0且b > 0時，輸出格式應為 y = b",
    "若m 為 0且b < 0時，輸出格式應為 y = -b",
    "",
    "範例輸出：",
    "y = 4/5x - 18/5",
    "y = -2x"
  ],
  "testcase": {
    "codeType": 1,
    "cases": [
      {
        "input": [
          "5",
          "2 -2 7 2",
          "8 -2 -3 9",
          "2 1 7 2",
          "-2 -5 1 4",
          "9 6 15 12"
        ],
        "output": [
          "y = 4/5x - 18/5",
          "y = -x + 6",
          "y = 1/5x + 3/5",
          "y = 3x + 1",
          "y = x - 3"
        ]
      },
      {
        "input": [
          "3",
          "3 -6 -4 8",
          "-6 6 -1 1",
          "20 10 10 5"
        ],
        "output": [
          "y = -2x",
          "y = -x",
          "y = 1/2x"
        ]
      },
      {
        "input": [
          "3",
          "6 -3 -3 -3",
          "5 10 -3 10",
          "2 8 9 8"
        ],
        "output": [
          "y = -3",
          "y = 10",
          "y = 8"
        ]
      }
    ]
  },
  "sampleCode": [
    "#include <stdio.h>",
    "",
    "int exec();",
    "int stringToNumber(char (*s)[]);",
    "void simplify(int *upper, int *lower);",
    "",
    "int main() {",
    "  int count;",
    "  scanf(\"%d\", &count);",
    "  getchar();",
    "",
    "  while (count > 0) {",
    "    exec();",
    "    count --;",
    "  }",
    "}",
    "",
    "int exec() {",
    "  int _x1, _x2, _y1, _y2;",
    "  char x1[10], x2[10], y1[10], y2[10];",
    "",
    "  scanf(\"%s %s %s %s\", &x1, &y1, &x2, &y2);",
    "  getchar();",
    "",
    "  _x1 = stringToNumber(&x1);",
    "  _x2 = stringToNumber(&x2);",
    "  _y1 = stringToNumber(&y1);",
    "  _y2 = stringToNumber(&y2);",
    "",
    "  int mUpper = _y1 - _y2;",
    "  int mLower = _x1 - _x2;",
    "",
    "  int bUpper = (_y1 * mLower - _x1 * mUpper);",
    "  int bLower = mLower;",
    "",
    "  char mIsNeg = (mUpper<0) ^ (mLower<0);",
    "  char bIsNeg = (bUpper<0) ^ (bLower<0);",
    "",
    "  mUpper *= (mUpper < 0) ? -1 : 1;",
    "  mLower *= (mLower < 0) ? -1 : 1;",
    "  bUpper *= (bUpper < 0) ? -1 : 1;",
    "  bLower *= (bLower < 0) ? -1 : 1;",
    "",
    "  simplify(&mUpper, &mLower);",
    "  simplify(&bUpper, &bLower);",
    "  ",
    "  printf(\"y = \");",
    "",
    "  if (mUpper != 0) {",
    "    printf(mIsNeg ? \"-\" : \"\");",
    "    if (mLower == 0) {",
    "      printf(\"%d\\n\", _x1);",
    "      return 0;",
    "    } else if (mLower == mUpper) {",
    "      printf(\"x \");",
    "    } else if (mLower == 1) {",
    "      printf(\"%dx \", mUpper);",
    "    } else {",
    "      printf(\"%d/%dx \", mUpper, mLower);",
    "    }",
    "  }",
    "",
    "  if (bUpper != 0) {",
    "    if (bIsNeg) {",
    "      printf(\"-\");",
    "    } else if (mUpper != 0) {",
    "      printf(\"+\");",
    "    }",
    "",
    "    if (mUpper != 0) {",
    "      printf(\" \");",
    "    }",
    "    ",
    "    if (bUpper == bLower) {",
    "      printf(\"1\");",
    "    } else if (bLower == 1) {",
    "      printf(\"%d\", bUpper);",
    "    } else {",
    "      printf(\"%d/%d\", bUpper, bLower);",
    "    }",
    "",
    "  }",
    "  ",
    "  printf(\"\\n\");",
    "  return 0;",
    "}",
    "",
    "int stringToNumber(char (*s)[]) {",
    "  char isNeg = 1;",
    "",
    "  int sum = 0;",
    "  int index = 0;",
    "",
    "  if ((*s)[0] == '-') {",
    "    isNeg = -1;",
    "    index ++;",
    "  }",
    "",
    "  while ((*s)[index] != '\\0') {",
    "    sum = sum*10 + (*s)[index]-'0';",
    "    index ++;",
    "  }",
    "",
    "  return sum * isNeg;",
    "}",
    "",
    "void simplify(int *upper, int *lower) {",
    "  long long int target = ( (*upper > *lower) ? *upper : *lower ) / 2;",
    "",
    "  int index = 2;",
    "",
    "  while (index <= target) {",
    "    if (*upper % index == 0 && *lower % index == 0) {",
    "      *upper /= index;",
    "      *lower /= index;",
    "      continue;",
    "    }",
    "",
    "    index ++;",
    "  }",
    "}"
  ]
}