{
  "uuid": "e7533ec3-1cb2-4ba9-8708-23792c134cad",
  "title": "2. 棒球壘包",
  "createDate": 1740931140000,
  "collections": [
    "eb097620-6eca-4b6b-9bc3-f7adb2b5e94d"
  ],
  "problem": [
    "根據棒球隊球員打擊結果，計算出球隊的得分。",
    "",
    "棒球規則如下：",
    "球場上有四個壘包， 稱為本壘、一、二和三壘。",
    "本壘握球棒打的稱「擊球員」 ，在另外三個壘包的稱為「跑員」。",
    "當擊球員打擊「安打」時， 擊球員與跑壘員可移動，",
    "「出局」時，跑壘員不動，擊球員離場換下一位。",
    "",
    "擊球員打擊情況如下：",
    "安打：以1, 2, 3 和 4 代表一、二、三和全(四)壘打。",
    "出局：以 0 表示出局。",
    "",
    "比賽開始由第 1位打擊，接著2, 3, 4, 5位球員。",
    "打出 K 壘打時，場上球員(擊球員和跑壘員)會前進 K個壘包。",
    "本壘到一壘，接著二、三壘，最後回到本壘。回到本壘可得1分。",
    "每達到三個出局數時，壘包清空(清空一、二和三壘)，然後繼續計算直到五名打者打擊完成。",
    "",
    "最後根據5位擊球員打擊情況，計算出球隊得分與一、二、三壘的情況，有人為1，沒人為0。",
    "",
    "【輸入說明】",
    "第一行：輸入一個字元，代表打者1擊出的安打數",
    "第二行：輸入一個字元，代表打者2擊出的安打數",
    "第三行：輸入一個字元，代表打者3擊出的安打數",
    "第四行：輸入一個字元，代表打者4擊出的安打數",
    "第五行：輸入一個字元，代表打者5擊出的安打數",
    "",
    "範例輸入說明:",
    "1 (打者1擊出1壘安打)",
    "2 (打者2擊出2壘安打)",
    "3 (打者3擊出3壘安打)",
    "4 (打者4擊出全壘打)",
    "0 (打者5出局)",
    "",
    "【輸出說明】",
    "第一行輸出球隊總得分 (總得分為整數)",
    "第二行分別輸出一壘、二壘、三壘的情況，中間以空白隔開，壘包上有人為1，壘包上沒人為0。",
    "",
    "範例輸出說明:",
    "4 (總得分為4分)",
    "0 0 0 (分別代表一壘沒人、二壘沒人、三壘沒人，中間以空白隔開)"
  ],
  "testcase": {
    "codeType": 1,
    "cases": [
      {
        "input": [
          "1",
          "1",
          "1",
          "0",
          "0"
        ],
        "output": [
          "0",
          "1 1 1"
        ]
      },
      {
        "input": [
          "4",
          "0",
          "0",
          "0",
          "4"
        ],
        "output": [
          "2",
          "0 0 0"
        ]
      },
      {
        "input": [
          "4",
          "1",
          "0",
          "0",
          "0"
        ],
        "output": [
          "1",
          "0 0 0"
        ]
      },
      {
        "input": [
          "0",
          "3",
          "3",
          "2",
          "1"
        ],
        "output": [
          "2",
          "1 0 1"
        ]
      }
    ]
  },
  "sampleCode": [
    "#include <stdio.h>",
    "",
    "void run(int step, unsigned int *state) {",
    "  static int out = 0;",
    "",
    "  if (step <= 0) { // If player hits out",
    "    if (++out >= 3) { ",
    "      *state &= ~7; // Clear base 1, 2, 3",
    "      out = 0; // Reset out player counter",
    "    }",
    "",
    "    return;",
    "  }",
    "",
    "  *state = (*state << step) + (1 << (step-1));",
    "}",
    "",
    "int calculate(unsigned int state) {",
    "  int pts = 0;",
    "  state >>= 3;",
    "  while (state > 0) {",
    "    if (state & 1) {",
    "      pts ++;",
    "    }",
    "    state >>= 1;",
    "  }",
    "",
    "  return pts;",
    "}",
    "",
    "int havePeople(unsigned int state, int base) { ",
    "  return (state & 1 << (base-1)) ? 1 : 0;",
    "}",
    "",
    "int main() {",
    "  int input;",
    "  unsigned int state = 0;",
    "",
    "  for (int i=0 ; i<5 ; i++) {",
    "    scanf(\"%d\", &input);",
    "    run(input, &state);",
    "  }",
    "",
    "  printf(\"%d\\n\", calculate(state));",
    "",
    "  printf(\"%d %d %d\\n\", havePeople(state, 1), havePeople(state, 2), havePeople(state, 3));",
    "  return 0;",
    "}"
  ]
}