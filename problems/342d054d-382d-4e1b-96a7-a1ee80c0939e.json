{
  "uuid": "342d054d-382d-4e1b-96a7-a1ee80c0939e",
  "title": "7. 衝堂",
  "createDate": 1750302596246,
  "collections": [
    "9b99bc6a-12d6-4347-87c5-9cc2082e7508"
  ],
  "problem": [
    "請檢查三門課程是否衝堂,每一門課上課 2小時。",
    "依序輸入 :",
    "課程編號 (4位數字)",
    "該課程上課時間 (輸入二位數字上課時間, 十位數星期 1-5, 個位數第 1-9 節)。",
    "【輸入說明】",
    "輸入三門課程的資訊",
    "每一門課程的資訊",
    "第一行 : 輸入課程編號(int)",
    "第二行 : 輸入第一節課的上課時間(二位數字，第一個數字為星期，第二個數字為節數)",
    "第三行 : 輸入第二節課的上課時間(二位數字，第一個數字為星期，第二個數字為節數)",
    "範例輸入說明:",
    "Sample Input:",
    "1001 (第一門課課程編號)",
    "59 (星期5 第9節課)",
    "25 (星期2 第5節課)",
    "1002 (第二門課課程編號)",
    "25 (星期2 第5節課)",
    "59 (星期5 第9節課)",
    "1003 (第三門課課程編號)",
    "11 (星期1 第1節課)",
    "25 (星期2 第5節課)",
    "【輸出說明】",
    "若無發生衝堂，則輸出correct",
    "若發生衝堂 :",
    "輸出所有衝堂的課程，每一行輸出兩個衝堂的課程編號，以及衝堂是在哪一個時間，參考下列格式 :",
    "{課程1編號} and {課程2編號} conflict on {衝堂時間}",
    "課程編號較小的為課程1，另一堂課程為課程2",
    "若有多個課程衝堂，課程編號較小的先輸出。",
    "若其中兩堂課程的兩節彼此衝堂，則先輸出上課時間二位數字小的，再輸出上課時間二位數字大的。",
    "範例輸出說明:",
    "Sample Output:",
    "1001 and 1002 conflict on 25(課程1001跟課程1002在星期2第5節衝堂，因課程1001小於1002，所以課程1001放前面)",
    "1001 and 1002 conflict on 59(課程1001跟課程1002在星期5第9節衝堂，因課程1001小於1002，所以課程1001放前面，59大於25，所以在59後面輸出)",
    "1001 and 1003 conflict on 25(課程1001跟課程1003在星期2第5節衝堂，因課程1001小於1003，所以課程1001放前面)",
    "1002 and 1003 conflict on 25(課程1002跟課程1003在星期2第5節衝堂，因課程1002小於1003，所以課程1002放前面)"
  ],
  "testcase": {
    "codeType": 0,
    "cases": [
      {
        "input": [
          "2001",
          "12",
          "13",
          "2002",
          "22",
          "23",
          "2003",
          "32",
          "33"
        ],
        "output": [
          "correct"
        ]
      },
      {
        "input": [
          "3001",
          "22",
          "23",
          "2002",
          "22",
          "24",
          "2003",
          "33",
          "34"
        ],
        "output": [
          "2002 and 3001 conflict on 22"
        ]
      },
      {
        "input": [
          "4001",
          "28",
          "29",
          "4002",
          "29",
          "28",
          "4003",
          "33",
          "34"
        ],
        "output": [
          "4001 and 4002 conflict on 28",
          "4001 and 4002 conflict on 29"
        ]
      },
      {
        "input": [
          "5001",
          "31",
          "29",
          "5002",
          "29",
          "28",
          "5003",
          "33",
          "28"
        ],
        "output": [
          "5001 and 5002 conflict on 29",
          "5002 and 5003 conflict on 28"
        ]
      },
      {
        "input": [
          "6003",
          "12",
          "13",
          "6002",
          "12",
          "13",
          "6001",
          "13",
          "12"
        ],
        "output": [
          "6001 and 6002 conflict on 12",
          "6001 and 6002 conflict on 13",
          "6001 and 6003 conflict on 12",
          "6001 and 6003 conflict on 13",
          "6002 and 6003 conflict on 12",
          "6002 and 6003 conflict on 13"
        ]
      }
    ]
  },
  "sampleCode": [
    "# Data is constructed with structure: (Name, Time, Mark)",
    "data: list[tuple[str, str, set]] = []",
    "",
    "WEEKS = [\"1\", \"2\", \"3\", \"4\", \"5\"]",
    "TIMES = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]",
    "",
    "def addCourse() -> bool:",
    "  name = input()",
    "",
    "  for _ in range(2):",
    "    time = input()",
    "    if (time[0] not in WEEKS):",
    "      return False",
    "",
    "    if (time[1] not in TIMES):",
    "      return False",
    "    ",
    "    data.append((name, time, set()))",
    "  ",
    "  return True",
    "",
    "def main():",
    "  trigger = False",
    "  ",
    "  for _ in range(3):",
    "    addCourse()",
    "  ",
    "  data.sort(key=lambda e: e[0])",
    "",
    "  conflicts: list[set] = []",
    "  ",
    "  for target in range(0, len(data)):",
    "    for tamplate in range(0, len(data)):",
    "    ",
    "      if tamplate == target: continue",
    "",
    "      targetMark = data[target][0]+data[target][1]",
    "      tamplateMark = data[tamplate][0]+data[tamplate][1]",
    "      ",
    "      if tamplateMark in data[target][2]:",
    "        continue",
    "      ",
    "      if targetMark in data[tamplate][2]:",
    "        continue",
    "",
    "      data[target][2].add(tamplateMark)",
    "      data[tamplate][2].add(targetMark)",
    "      ",
    "      if data[tamplate][1] == data[target][1]:",
    "        trigger = True",
    "        conflicts.append((data[target][0], data[tamplate][0], data[target][1]))",
    "  ",
    "  for i in sorted(conflicts, key=lambda e: e[0]+e[1]+e[2]):",
    "    print(\"%s and %s conflict on %s\"%i)",
    "  ",
    "  if not trigger:",
    "    print(\"correct\")",
    "",
    "if __name__ == \"__main__\": main()"
  ]
}