{
  "uuid": "b8fdf33f-6425-48d6-84b2-9fd973c72486",
  "title": "16. 大數運算",
  "createDate": 1743695940000,
  "collections": [
    "eb097620-6eca-4b6b-9bc3-f7adb2b5e94d"
  ],
  "problem": [
    "在此題目中，你需要將輸入的整數進行+、-、*的運算並輸出",
    "",
    "【輸入說明】",
    "第一行輸入第一個整數 (1<=整數位數<=100)",
    "第二行輸入第二個整數 (1<=整數位數<=100)",
    "",
    "範例輸入說明:",
    "561651651641616585615168",
    "8789896545646546546546546545",
    "",
    "【輸出說明】",
    "第一行輸出相加的結果 (1<=輸出位數<=101)",
    "第二行輸出相減的結果 (1<=輸出位數<=101)",
    "第三行輸出相乘的結果 (1<=輸出位數<=200)",
    "",
    "範例輸出說明:",
    "8790458197298188163132161713",
    "-8789334893994904929960931377",
    "4936859912621323139844513105778629278692394769994560"
  ],
  "testcase": {
    "codeType": 1,
    "cases": [
      {
        "input": [
          "4534534535995165165161651",
          "99956651651651651651454535434"
        ],
        "output": [
          "99961186186187646816619697085",
          "-99952117117115656486289373783",
          "453256889016852581953231905042237629576284233717441534"
        ]
      },
      {
        "input": [
          "-99485111511613131894161651",
          "-65616518161616515646165165161616"
        ],
        "output": [
          "-65616617646728027259297059323267",
          "65616418676505004033033270999965",
          "6527866626312207359146741983744257449884858679294244388016"
        ]
      },
      {
        "input": [
          "9999654174541651561654165415615616541654654",
          "-6541651654165161651651651651465146654165444"
        ],
        "output": [
          "3458002520376489910002513764150469887489210",
          "16541305828706813213305817067080763195820098",
          "-65414254271969959029599286664161440719533332822203505376428354678452577994745228576376"
        ]
      },
      {
        "input": [
          "-45156156156115161131321361561231561651",
          "51651651561561515313514151561"
        ],
        "output": [
          "-45156156104463509569759846247717410090",
          "-45156156207766812692882876874745713212",
          "-2332390043635121295325476520619957306665418400256292666268329387211"
        ]
      },
      {
        "input": [
          "8885613521515251653515135841561651651310631516",
          "8885613521515251653515135841561651651310631516"
        ],
        "output": [
          "17771227043030503307030271683123303302621263032",
          "0",
          "78954127653734671559648880690313932932989188703994051754995126309891489120724557770732458256"
        ]
      },
      {
        "input": [
          "-4646546546546546546546546546465489789465999",
          "4646546546546546546546546546465489789465999"
        ],
        "output": [
          "0",
          "-9293093093093093093093093092930979578931998",
          "-21590394809223638052466881294956856549579606708494079665257406619876008073585577068001"
        ]
      }
    ]
  },
  "sampleCode": [
    "#include <stdio.h>",
    "#include <string.h>",
    "",
    "char num1[101], num2[101], remainder[202];",
    "",
    "int length(char *string);",
    "void stringReverse(char *string);",
    "void add(char *num1, char *num2, char *result);",
    "void substract(char *num1, char *num2, char *result);",
    "char compare(char *num1, char *num2);",
    "void convertToChar(char *arr, int length);",
    "void convertToNum(char *arr);",
    "void mutiply(char *num1, char *num2, char *result);",
    "int trim(char *result, int start);",
    "void rationalize(char *buf, int length);",
    "",
    "int main() {",
    "  scanf(\"%s\", &num1);",
    "  getchar();",
    "",
    "  scanf(\"%s\", &num2);",
    "  getchar();",
    "",
    "  add(num1, num2, remainder);",
    "  printf(\"%s\\n\", remainder);",
    "  ",
    "  memset(remainder, 0, 202);",
    "  substract(num1, num2, remainder);",
    "  printf(\"%s\\n\", remainder);",
    "",
    "  memset(remainder, 0, 202);",
    "  mutiply(num1, num2, remainder);",
    "  printf(\"%s\\n\", remainder);",
    "}",
    "",
    "int length(char *string) {",
    "  int sum = 0;",
    "  while (string[sum] != '\\0') {",
    "    sum ++;",
    "  }",
    "",
    "  return sum;",
    "}",
    "",
    "void add(char *num1, char *num2, char *result) {",
    "  int num1Len = length(num1);",
    "  int num2Len = length(num2);",
    "",
    "  int num1Index = num1Len - 1;",
    "  int num2Index = num2Len - 1;",
    "",
    "  char isNum1Neg = num1[0] == '-';",
    "  char isNum2Neg = num2[0] == '-';",
    "",
    "  if (isNum1Neg && !isNum2Neg) {",
    "    substract(num2, (num1+1), result);",
    "    return;",
    "  }",
    "",
    "  if (!isNum1Neg && isNum2Neg) {",
    "    substract(num1, num2+1, result);",
    "    return;",
    "  }",
    "",
    "  if (isNum1Neg && isNum2Neg) {",
    "    add(num1+1, num2+1, result+1);",
    "    result[0] = '-';",
    "    return;",
    "  }",
    "",
    "  int num1StopRange = isNum1Neg ? 1 : 0;",
    "  int num2StopRange = isNum2Neg ? 1 : 0;",
    "",
    "  convertToNum(num1);",
    "  convertToNum(num2);",
    "",
    "  int index = 0;",
    "",
    "  while (num1Index >= num1StopRange && num2Index >= num2StopRange) {",
    "    result[index] = num1[num1Index] + num2[num2Index];",
    "",
    "    num1Index--;",
    "    num2Index--;",
    "    index++;",
    "  }",
    "",
    "  // Fill up leftover number",
    "  while (num1Index >= num1StopRange || num2Index >= num2StopRange) {",
    "    char n1 = (num1Index >= num1StopRange) ? num1[num1Index] : 0;",
    "    char n2 = (num2Index >= num2StopRange) ? num2[num2Index] : 0;",
    "    ",
    "    result[index] = n1 + n2;",
    "",
    "    num1Index--;",
    "    num2Index--;",
    "    index++;",
    "  }",
    "",
    "  convertToChar(num1, num1Len);",
    "  convertToChar(num2, num2Len);",
    "",
    "  rationalize(result, index);",
    "  ",
    "  index = trim(result, index);",
    "",
    "  convertToChar(result, index+1);",
    "",
    "  stringReverse(result);",
    "}",
    "",
    "void substract(char *num1, char *num2, char *result) {",
    "  char isNum1Neg = num1[0] == '-';",
    "  char isNum2Neg = num2[0] == '-';",
    "",
    "  if (compare(num1, num2) == 0) {",
    "    result[0] = '0';",
    "    result[1] = '\\0';",
    "    return;",
    "  }",
    "",
    "  int num1Len = length(num1);",
    "  int num2Len = length(num2);",
    "",
    "  int num1Index = num1Len - 1;",
    "  int num2Index = num2Len - 1;",
    "",
    "  if (isNum1Neg && !isNum2Neg) {",
    "    add(num1+1, num2, result+1);",
    "",
    "    result[0] = '-';",
    "    return;    ",
    "  }",
    "",
    "  if (!isNum1Neg && isNum2Neg) {",
    "    add(num1, num2+1, result);",
    "",
    "    return;    ",
    "  }",
    "",
    "  if (isNum1Neg && isNum2Neg) {",
    "    substract(num2+1, num1+1, result);",
    "    return;",
    "  }",
    "",
    "  int num1StopRange = isNum1Neg ? 1 : 0;",
    "  int num2StopRange = isNum2Neg ? 1 : 0;",
    "",
    "  if (compare(num1, num2) < 0) {",
    "    substract(num2, num1, result+1);",
    "",
    "    result[0] = '-';",
    "",
    "    return;",
    "  }",
    "",
    "  // Convert all ascii code char to the offset with '0'",
    "  convertToNum(num1);",
    "  convertToNum(num2);",
    "",
    "  int index = 0;",
    "",
    "  while (num1Index >= num1StopRange && num2Index >= num2StopRange) {",
    "    result[index] = num1[num1Index] - num2[num2Index];",
    "",
    "    num1Index--;",
    "    num2Index--;",
    "    index++;",
    "  }",
    "",
    "  // Fill up leftover number",
    "  while (num1Index >= num1StopRange || num2Index >= num2StopRange) {",
    "    char n1 = (num1Index >= num1StopRange) ? num1[num1Index] : 0;",
    "    char n2 = (num2Index >= num2StopRange) ? num2[num2Index] : 0;",
    "    ",
    "    result[index] = n1 - n2;",
    "",
    "    num1Index--;",
    "    num2Index--;",
    "    index++;",
    "  }",
    "",
    "  convertToChar(num1, num1Len);",
    "  convertToChar(num2, num2Len);",
    "",
    "  rationalize(result, index);",
    "  ",
    "  // Find the last index without zero",
    "  index = trim(result, index);",
    "  ",
    "  convertToChar(result, index+1);",
    "",
    "  stringReverse(result);",
    "",
    "  return;",
    "}",
    "",
    "void mutiply(char *num1, char *num2, char *result) {",
    "  char isNum1Neg = num1[0] == '-';",
    "  char isNum2Neg = num2[0] == '-';",
    "",
    "  if (isNum1Neg || isNum2Neg) {",
    "    short isResultNeg = isNum1Neg ^ isNum2Neg;",
    "    ",
    "    if (isNum1Neg) {",
    "      num1 ++;",
    "    }",
    "",
    "    if (isNum2Neg) {",
    "      num2 ++;",
    "    }",
    "    if (isResultNeg) {",
    "      mutiply(num1, num2, result+1);",
    "      result[0] = '-';",
    "    } else {",
    "      mutiply(num1, num2, result);",
    "    }",
    "    return;",
    "  }",
    "  ",
    "  int num1Len = length(num1);",
    "  int num2Len = length(num2);",
    "",
    "  convertToNum(num1);",
    "  convertToNum(num2);",
    "",
    "  for (int index2=0; index2<num2Len ; index2++) {",
    "    for (int index1=0; index1<num1Len ; index1++) {",
    "      result[index1+index2] += num2[num2Len-index2-1] * num1[num1Len-index1-1];",
    "    }",
    "    rationalize(result, num1Len+num2Len);",
    "  }",
    "",
    "  int index = trim(result, num1Len+num2Len);",
    "  convertToChar(result, index+1);",
    "",
    "  stringReverse(result);",
    "}",
    "",
    "void stringReverse(char *string) {",
    "  int len = length(string);",
    "  for (int i=0; i < len/ 2 ; i++) {",
    "    char tmp = string[i];",
    "",
    "    string[i] = string[len-i-1];",
    "    string[len-i-1] = tmp;",
    "  }",
    "}",
    "",
    "// Return if num1 is larger than num2",
    "char compare(char *num1, char *num2) {",
    "  char isNum1Neg = num1[0] == '-';",
    "  char isNum2Neg = num2[0] == '-';",
    "",
    "  if (isNum1Neg ^ isNum2Neg) {",
    "    // If num2 is a negative number, then num1 is greater without doubt",
    "    return isNum2Neg ? 1 : -1;",
    "  }",
    "",
    "  int num1Index = length(num1);",
    "  int num2Index = length(num2);",
    "",
    "  if (num1Index != num2Index) {",
    "    return ((num1Index > num2Index) ^ isNum1Neg) ? 1 : -1;",
    "  }",
    "  ",
    "  int index = 0;",
    "  while (index < num1Index) {",
    "    if (num1[index] == num2[index]) {",
    "      index++;",
    "      continue;",
    "    }",
    "    return ((num1[index] > num2[index]) ^ isNum1Neg) ? 1 : -1;   ",
    "  }",
    "",
    "  return 0;",
    "}",
    "",
    "void convertToChar(char *arr, int length) {",
    "  arr[length] = '\\0';",
    "  while (--length >= 0) {",
    "    arr[length] += '0';",
    "  }",
    "}",
    "",
    "void convertToNum(char *arr) {",
    "  int len = length(arr);",
    "  while (--len >= 0) {",
    "    arr[len] -= '0';",
    "  }",
    "}",
    "",
    "int trim(char *result, int start) {",
    "  while (result[start] == 0) {",
    "    start--;",
    "  }",
    "  return start;",
    "}",
    "",
    "void rationalize(char *buf, int length) {",
    "  int index = 0;",
    "  while (index < length) {",
    "    if (buf[index] >= 10) {",
    "      buf[index+1] += buf[index] / 10;",
    "      buf[index] %= 10;",
    "    } else if (buf[index] < 0) {",
    "      buf[index] += 10;",
    "      buf[index+1] -= 1;",
    "    }",
    "    index ++;",
    "  }",
    "}"
  ]
}