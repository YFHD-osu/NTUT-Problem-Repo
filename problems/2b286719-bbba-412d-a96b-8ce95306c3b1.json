{
  "uuid": "2b286719-bbba-412d-a96b-8ce95306c3b1",
  "title": "24. 迷你數獨",
  "createDate": 1750302596249,
  "collections": [
    "9b99bc6a-12d6-4347-87c5-9cc2082e7508"
  ],
  "problem": [
    "迷你數獨由4*4個格子組成，每格為空白或1~4區間的整數，而4*4個格子又可以被分為左上、右上、左下、右下4個2*2大小區塊(Block)。",
    "例如以下的迷你矩陣：",
    "3 1 4 2",
    "4 2 3 1",
    "1 3 2 4",
    "2 4 1 3",
    "此矩陣又可分為左上、右上、左下、右下4個2*2大小的區塊，以上面的矩陣為例，左上區塊為",
    "3 1",
    "4 2",
    "右下區塊為",
    "2 4",
    "1 3",
    "矩陣中的值須滿足以下數獨規則：",
    "1. 每個直欄  (Column)中，數字1~4皆不能缺少也不會重複出現。",
    "2. 每個橫列 (Row)中，數字1~4皆不能缺少也不會重複出現。",
    "3. 每個區塊(Block)中，數字1~4皆不能缺少也不會重複出現。",
    "【輸入說明】",
    "輸入共有4行，每行有4個0~4的整數，其中0表示空白的格子，輸入的每個整數中間以一個空白隔開，表示一個4*4迷你數獨的初始狀態。",
    "其中：",
    "(1) 本題目0表示需要程式計算取代數字的地方",
    "(2) 本題目非0數字固定8個",
    "(3) 本題目輸入每個直欄、橫列、或區塊，都至少存在一個0",
    "範例輸入說明:",
    "Sample Input:",
    "0 0 0 0",
    "0 2 3 1",
    "0 3 2 4",
    "2 0 0 3",
    "【輸出說明】",
    "輸出共有4行，每行有4個1~4的整數，每個整數間以一個空白隔開。表示一個4*4迷你數獨的結果，且結果符合數獨規則。",
    "計算出完整數獨矩陣步驟：",
    "(1)右下區域中已知有[2 3 4]，因此0應被取代為1。",
    "(2) index=3的直欄  (Column)已有[1 3 4]，因此0應被取代為2。",
    "(3) index=1的橫列(Row)已有[1 2 3]，因此0應被取代為4。",
    "(4) index=2的橫列(Row)已有[2 3 4]，因此0應被取代為1。",
    "因此矩陣變為：",
    "0 0 0 2",
    "4 2 3 1",
    "1 3 2 4",
    "2 0 1 3",
    "繼續第二、三輪計算，即可完成所有0的替換。",
    "範例輸出說明:",
    "3 1 4 2",
    "4 2 3 1",
    "1 3 2 4",
    "2 4 1 3"
  ],
  "testcase": {
    "codeType": 0,
    "cases": [
      {
        "input": [
          "3 0 1 4",
          "0 0 0 2",
          "2 0 4 0",
          "1 4 0 0"
        ],
        "output": [
          "3 2 1 4",
          "4 1 3 2",
          "2 3 4 1",
          "1 4 2 3"
        ]
      },
      {
        "input": [
          "1 0 4 2",
          "4 0 3 0",
          "0 1 0 4",
          "0 0 1 0"
        ],
        "output": [
          "1 3 4 2",
          "4 2 3 1",
          "3 1 2 4",
          "2 4 1 3"
        ]
      },
      {
        "input": [
          "1 0 0 0",
          "4 2 3 0",
          "0 0 1 0",
          "3 1 0 2"
        ],
        "output": [
          "1 3 2 4",
          "4 2 3 1",
          "2 4 1 3",
          "3 1 4 2"
        ]
      }
    ]
  },
  "sampleCode": [
    "def main():",
    "  data = [list(map(int, input().split())) for _ in range(4)]",
    "",
    "  for i in fill(data):",
    "    print(\" \".join(list(map(str, i))))",
    "    ",
    "def fill(data: list, depth: int = 0) -> list:",
    "  r = depth // 4",
    "  c = depth  % 4",
    "",
    "  if depth >= 16:",
    "    if sum(data[0][:2] + data[1][:2]) != 10:",
    "      return None",
    "    ",
    "    if sum(data[0][2:] + data[1][2:]) != 10:",
    "      return None",
    "    ",
    "    if sum(data[2][:2] + data[3][:2]) != 10:",
    "      return None",
    "    ",
    "    if sum(data[2][2:] + data[3][2:]) != 10:",
    "      return None",
    "    ",
    "    for r in range(len(data)):",
    "      if sum(data[r]) != 10:",
    "        return None",
    "      ",
    "    for c in range(len(data)):",
    "      if sum([data[r][c] for r in range(4)]) != 10:",
    "        return None",
    "      ",
    "    return data",
    "",
    "  if data[r][c] != 0:",
    "    return fill(data, depth+1)",
    "",
    "  for i in range(1, 5):",
    "    data[r][c] = i",
    "    result = fill(data, depth+1)",
    "",
    "    if not result: continue",
    "    return result",
    "  ",
    "  data[r][c] = 0",
    "  return None",
    "",
    "if __name__ == \"__main__\":",
    "  main()"
  ]
}