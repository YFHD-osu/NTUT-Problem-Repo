{
  "uuid": "735e1342-1479-41f5-8e91-8b9a4fc27645",
  "title": "21. 疫情分析",
  "createDate": 1750302596249,
  "collections": [
    "9b99bc6a-12d6-4347-87c5-9cc2082e7508"
  ],
  "problem": [
    "A城市的人口共有 n 人，計算期間共有 m 天。從第1天開始，A城市中有 a 個人確診，每位確診者在染疫期間會傳染給 b 個人，而確診者經過 c 天後會康復，除了具有免疫力外也不會再傳染給其他人。以第1天確診的確診者、且康復天數c = 7為例，在第1~7天皆視為確診，在第8天時才視為康復。",
    "設該城市第一天有 d 比例的人具有對病毒的免疫力，具有免疫力的人不會遭到傳染，即確診總人數不會超過 n*(1-d)人。",
    "以1000人、d=0.7為例，最多只會有1000*(1-0.7) = 300人遭傳染。且隨著確診者康復，d會逐漸提高。如d原為0.7，總人口數為1000，而當天共有50人康復，則明天的 d = 0.7 + 50/1000 = 0.75。",
    "由上計算可知每名確診者在c天裡，每天平均能夠傳染的人數為b / c，並且 d 隨著康復人數提高。",
    "假設每名確診者每日能夠傳染的人數x為：",
    "x = ( b / c) * ( 1 – d )",
    "可得每天的新增確診數y為：",
    "y = 昨日總確診人數 * x，y需無條件捨去小數",
    "若當日有人康復，則在計算完當日的新增確診人數後，再進行更新 d 的計算。",
    "*注意事項* 凡確診過的人(包含確診中及已康復)，皆不會二度感染。每日傳染人數不得超過可被感染的人數(若計算超過則等於可被感染人數)，例如：城市總人口數共為300人，原先有210人具有免疫力不會被傳染，第一天多了90位確診，則城市中「可被感染人數」更新為 300 - (210 + 90) = 0人。代表日後皆不會有新的確診者。",
    "請計算出A城市每日的總確診人數、新增確診人數、康復人數，並在最後計算期間共有多少人確診。",
    "【輸入說明】",
    "第1行：輸入A城市人口n，n為整數，100 <= n <= 10000",
    "第2行：輸入計算期間m，m為整數，1 <= m <= 20",
    "第3行：輸入第一天的確診人數a，a為整數，1 <= a <=  n * (1 - d)",
    "第4行：輸入每位確診者在確診期間的傳染人數b，b為浮點數，0.1 <= b <= 2",
    "第5行：輸入康復天數c，c為整數，1 <= c <= 20",
    "第6行：輸入第一天A城市的免疫率d，d為浮點數，0 <= d <= 1",
    "範例輸入說明:",
    "1000（A城市人口共有1000人）",
    "10  （計算期間共10天）",
    "100 （第1天A城市中有100人確診）",
    "1.2 （確診者在染疫期間傳染給1.2個人）",
    "7  （確診者需7天才會康復）",
    "0.7 （A城市有70%的人已免疫）",
    "【輸出說明】",
    "第1~m行：輸出四個整數，中間以一個空白隔開。分別表示第幾天、A城市當天的總確診人數、當天的新增確診人數、當天的康復人數",
    "第m+1行：輸出在m天的期間裡確診的總人數",
    "範例輸出說明:",
    "1 100 100 0（第1天、當天總確診100人、新增確診100人、康復0人）",
    "2 105 5 0  （第2天、當天總確診105人、新增確診5人、康復0人）",
    "3 110 5 0  （第3天、當天總確診110人、新增確診5人、康復0人）",
    "4 115 5 0  （第4天、當天總確診115人、新增確診5人、康復0人）",
    "5 120 5 0  （第5天、當天總確診120人、新增確診5人、康復0人）",
    "6 126 6 0  （第6天、當天總確診126人、新增確診6人、康復0人）",
    "7 132 6 0  （第7天、當天總確診132人、新增確診6人、康復0人）",
    "8 38 6 100 （第8天、當天總確診38人、新增確診6人、康復100人）",
    "9 34 1 5   （第9天、當天總確診34人、新增確診1人、康復5人）",
    "10 30 1 5  （第10天、當天總確診30人、新增確診1人、康復5人）",
    "140        （10天間共有140人確診）"
  ],
  "testcase": {
    "codeType": 0,
    "cases": [
      {
        "input": [
          "300",
          "10",
          "90",
          "1.2",
          "7",
          "0.7"
        ],
        "output": [
          "1 90 90 0",
          "2 90 0 0",
          "3 90 0 0",
          "4 90 0 0",
          "5 90 0 0",
          "6 90 0 0",
          "7 90 0 0",
          "8 0 0 90",
          "9 0 0 0",
          "10 0 0 0",
          "90"
        ]
      },
      {
        "input": [
          "450",
          "12",
          "120",
          "0.2",
          "5",
          "0.55"
        ],
        "output": [
          "1 120 120 0",
          "2 122 2 0",
          "3 124 2 0",
          "4 126 2 0",
          "5 128 2 0",
          "6 10 2 120",
          "7 8 0 2",
          "8 6 0 2",
          "9 4 0 2",
          "10 2 0 2",
          "11 0 0 2",
          "12 0 0 0",
          "130"
        ]
      },
      {
        "input": [
          "6000",
          "10",
          "1200",
          "1.5",
          "4",
          "0.75"
        ],
        "output": [
          "1 1200 1200 0",
          "2 1312 112 0",
          "3 1435 123 0",
          "4 1500 65 0",
          "5 300 0 1200",
          "6 188 0 112",
          "7 65 0 123",
          "8 0 0 65",
          "9 0 0 0",
          "10 0 0 0",
          "1500"
        ]
      },
      {
        "input": [
          "8500",
          "20",
          "950",
          "0.9",
          "10",
          "0"
        ],
        "output": [
          "1 950 950 0",
          "2 1035 85 0",
          "3 1128 93 0",
          "4 1229 101 0",
          "5 1339 110 0",
          "6 1459 120 0",
          "7 1590 131 0",
          "8 1733 143 0",
          "9 1888 155 0",
          "10 2057 169 0",
          "11 1292 185 950",
          "12 1310 103 85",
          "13 1320 103 93",
          "14 1322 103 101",
          "15 1313 101 110",
          "16 1292 99 120",
          "17 1257 96 131",
          "18 1205 91 143",
          "19 1136 86 155",
          "20 1046 79 169",
          "3103"
        ]
      },
      {
        "input": [
          "100",
          "15",
          "30",
          "2",
          "15",
          "0"
        ],
        "output": [
          "1 30 30 0",
          "2 34 4 0",
          "3 38 4 0",
          "4 43 5 0",
          "5 48 5 0",
          "6 54 6 0",
          "7 61 7 0",
          "8 69 8 0",
          "9 78 9 0",
          "10 88 10 0",
          "11 99 11 0",
          "12 100 1 0",
          "13 100 0 0",
          "14 100 0 0",
          "15 100 0 0",
          "100"
        ]
      }
    ]
  },
  "sampleCode": [
    "def main():",
    "  n = int(input()) # The popularity of the city",
    "  m = int(input()) # Calculate days",
    "  A = int(input()) # Number of new patient for today",
    "  B = float(input()) # The inflection rate",
    "  C = int(input()) # The days required to recover",
    "  D = float(input()) # The immune rate",
    "",
    "  res = calc(n, m, A, B, C, D)",
    "  print(\"%d\" % (res))",
    "",
    "# data variable stores numbers of new patient of each day ",
    "def calc(n: int, m: int, a: int, b: float, c: int, d: float, data: list=[0]) -> int:",
    "  dayIndex = len(data)",
    "",
    "  if m+1 == dayIndex:",
    "    return sum(data)",
    "",
    "  # Calculate maximum patient with today's d value",
    "  maxPatient = int(n * (1 - d))",
    "  ",
    "  # Calculate sick people until yesterday",
    "  sickPeople = sum(data) ",
    "",
    "  # Calculate recovered people until yesterday",
    "  healPeople = sum(data[:-c]) if len(data) > c else 0 ",
    "",
    "  # Calculate the number of patient yesterday",
    "  yesterdayPatient = sickPeople - healPeople",
    "",
    "  todayAdd = a",
    "",
    "  isExceed = False",
    "  if yesterdayPatient + a > maxPatient:",
    "    isExceed = True",
    "",
    "    # Add as maximum patient as possible",
    "    todayAdd = maxPatient - yesterdayPatient",
    "",
    "    # Clear added if current patient is more than maximum",
    "    todayAdd = 0 if todayAdd < 0 else todayAdd",
    "",
    "  # Calculate today's patient",
    "  todayPatient = yesterdayPatient - todayHeal + todayAdd",
    "",
    "  # Prepare for tomorrow",
    "  todayHeal = data[-c] if len(data) > c else 0",
    "",
    "  # Calculate new d value for tomorrow",
    "  immuneRate = d + todayHeal / n",
    "  immuneRate = 1 if immuneRate > 1 else immuneRate",
    "",
    "  # Calculate tomorrow's patient with new immuneRate",
    "  tomorrowSick = int(todayPatient * (b / c) * (1 - immuneRate) // 1)",
    "  tomorrowSick = 0 if isExceed else tomorrowSick",
    "  ",
    "  print(\"%d %d %d %d\"%(dayIndex, todayPatient, todayAdd, todayHeal))",
    "",
    "  return calc(n, m, tomorrowSick, b, c, immuneRate, data+[todayAdd])",
    "",
    "if __name__ == \"__main__\":",
    "  main()"
  ]
}