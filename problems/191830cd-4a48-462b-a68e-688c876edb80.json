{
  "uuid": "191830cd-4a48-462b-a68e-688c876edb80",
  "title": "7. 複合圖型繪圖",
  "createDate": 1741795140000,
  "collections": [
    "df834ace-8de1-4f4e-bdcf-8c6b348a2109"
  ],
  "problem": [
    "請使用迴圈 (while loop 或 for loop)",
    "根據圖案編號 N 與圖案高度 M ，輸出對應圖案。",
    "",
    "以下為圖案編號與其圖案規則：",
    "",
    "圖案編號N = 1時，輸出井字號、英文字母與星號的複合圖案。",
    "第一行為 M - 1個井字號 及 1 個星號 及 M - 1個井字號，",
    "第二行開始中間為星號與英文字母相間，每一行的英文字母照A，B，C依次循環。規則如下直到M行結束:",
    "第二行為 M-2 個井字號及 2 個星號和 1 個英文字母A相間及 M-2 個井字號",
    "第三行為 M-3 個井字號及 3 個星號和 2 個英文字母B相間及 M-3 個井字號",
    "第四行為 M-4 個井字號及 4 個星號和 3 個英文字母C相間及 M-4 個井字號",
    "範例:",
    "輸入:",
    "N=1，M=5",
    "輸出:",
    "####*####",
    "###*A*###",
    "##*B*B*##",
    "#*C*C*C*#",
    "*A*A*A*A*",
    "",
    "圖案編號N = 2時，輸出數字與星號的複合圖案。",
    "規則如下:",
    "第一行為 數字1 及 M * 2 個星號 及 數字1。",
    "第二行為數字2到1 及 (M - 1)*2 個星號 及 數字1到2。",
    "第三行為  數字3到1 及 (M - 2)*2 個星號 及 數字1到3。",
    "第三行為 數字4到1及 (M - 3)*2 個星號 及 數字1到4 。",
    "數字的範圍和星號的數量，依照規則和行數以此類推，直到M行結束。",
    "範例:",
    "輸入:",
    "N=2，M=5",
    "輸出:",
    "1**********1",
    "21********12",
    "321******123",
    "4321****1234",
    "54321**12345",
    "【輸入說明】",
    "輸入兩個整數 N, M，",
    "第一行:輸入整數 N (1 <= N <= 2)， 代表圖案編號，",
    "第二行:輸入整數 M (2 <= M <= 9)，代表圖案高度。",
    "",
    "",
    "【輸出說明】",
    "按照圖案編號輸出對應圖案，",
    "若圖案編號 N 或圖案高度 M 超出範圍，則輸出 error"
  ],
  "testcase": {
    "codeType": 1,
    "cases": [
      {
        "input": [
          "3",
          "zfwas"
        ],
        "output": [
          "error"
        ]
      },
      {
        "input": [
          "1",
          "15"
        ],
        "output": [
          "error"
        ]
      },
      {
        "input": [
          "1",
          "9"
        ],
        "output": [
          "########*########",
          "#######*A*#######",
          "######*B*B*######",
          "#####*C*C*C*#####",
          "####*A*A*A*A*####",
          "###*B*B*B*B*B*###",
          "##*C*C*C*C*C*C*##",
          "#*A*A*A*A*A*A*A*#",
          "*B*B*B*B*B*B*B*B*"
        ]
      },
      {
        "input": [
          "2",
          "7"
        ],
        "output": [
          "1**************1",
          "21************12",
          "321**********123",
          "4321********1234",
          "54321******12345",
          "654321****123456",
          "7654321**1234567"
        ]
      }
    ]
  },
  "sampleCode": [
    "#include <stdio.h>",
    "",
    "int m, n;",
    "",
    "void normal(short count) {",
    "  short _index = 0;",
    "",
    "  while (_index < count) {",
    "    for (int i=0; i<(count - _index - 1) ; i++) ",
    "      printf(\"#\");",
    "",
    "    ",
    "    for (int i=0; i<(_index) ; i++)",
    "      printf(\"*%c\", 'A' + ( (_index-1) % 3 ));",
    "          ",
    "    printf(\"*\");",
    "",
    "    for (int i=0; i<(count - _index - 1) ; i++) ",
    "      printf(\"#\");",
    "    ",
    "    printf(\"\\n\");",
    "    _index++;",
    "  }",
    "}",
    "",
    "void reverse(short count) {",
    "  short _index = 0;",
    "",
    "  while (_index < count) {",
    "    for (int i=0; i<_index+1 ; i++) ",
    "      printf(\"%c\", '0'+_index+1-i);",
    "    ",
    "    ",
    "    for (int i=0; i<(count - _index)*2 ; i++)",
    "      printf(\"*\");",
    "          ",
    "    // printf(\"*\");",
    "",
    "    // for (int i=0; i<(count - _index - 1) ; i++) ",
    "    //   printf(\"#\");",
    "    ",
    "    for (int i=0; i<_index+1 ; i++) ",
    "      printf(\"%c\", '0'+1+i);",
    "",
    "    printf(\"\\n\");",
    "    _index++;",
    "  }",
    "}",
    "",
    "int main() {",
    "  scanf(\"%d\", &n);",
    "  getchar();",
    "  ",
    "  scanf(\"%d\", &m);",
    "  getchar();",
    "",
    "  if (n>2 || n<1) {",
    "    printf(\"error\");",
    "    return 0;",
    "  }",
    "",
    "  if (m>9 || m<2) {",
    "    printf(\"error\");",
    "    return 0;",
    "  }",
    "",
    "  if (n==1) {",
    "    normal(m);  ",
    "    return 0;",
    "  }",
    "",
    "  reverse(m);",
    "",
    "  return 0;",
    "}"
  ]
}