{
  "uuid": "83b2e351-dc2b-4b56-870e-1ff5a7cfba1b",
  "title": "14. 分數四則運算",
  "createDate": 1742831940000,
  "collections": [
    "df834ace-8de1-4f4e-bdcf-8c6b348a2109"
  ],
  "problem": [
    "給定兩個分數和一個運算符號，進行分數運算後輸出計算後的結果。",
    "分數表示格式如下",
    "1.真分數或假分數：分子/分母，例如3/7",
    "2.帶分數：整數(分子/分母)，例如10(3/5)",
    "",
    "※函式傳遞參數需使用指標",
    "",
    "【輸入說明】",
    "第一行：輸入第一個分數",
    "第二行：輸入運算符號，加（+）減（-）乘（*）除（/）",
    "第三行：輸入第二個分數",
    "第四行：輸入是否重複第一到第四行繼續運算，y代表繼續、n代表結束",
    "",
    "範例輸入：",
    "-1(3/4)",
    "+",
    "1/2",
    "n",
    "",
    "【輸出說明】",
    "輸出結果需化為最簡分數，最簡分數定義：分子和分母互質",
    "若分子大於分母，需化為帶分數",
    "若計算結果為整數，則只需輸出整數",
    "若輸入分數的分母或運算結果分母為0，輸出Error",
    "若運算結果為負數，需在前面輸出負號",
    "",
    "範例輸出：",
    "-1(1/4)"
  ],
  "testcase": {
    "codeType": 1,
    "cases": [
      {
        "input": [
          "5/0",
          "+",
          "3/2",
          "y",
          "-7/8",
          "/",
          "0/8",
          "n"
        ],
        "output": [
          "Error",
          "Error"
        ]
      },
      {
        "input": [
          "15/3",
          "/",
          "-1(12/18)",
          "y",
          "1/5",
          "-",
          "1/5",
          "y",
          "10/3",
          "+",
          "90(20/3)",
          "n"
        ],
        "output": [
          "-3",
          "0",
          "100"
        ]
      },
      {
        "input": [
          "3/5",
          "+",
          "-5/8",
          "y",
          "4/13",
          "-",
          "7/9",
          "y",
          "-4(3/9)",
          "*",
          "5/12",
          "y",
          "14/3",
          "/",
          "1(5/6)",
          "n"
        ],
        "output": [
          "-1/40",
          "-55/117",
          "-1(29/36)",
          "2(6/11)"
        ]
      }
    ]
  },
  "sampleCode": [
    "#include <stdio.h>",
    "",
    "int fetchNumber(char (*s)[], int *start);",
    "void parseFrac(char (*s)[], int *upper, int *lower);",
    "void simplify(long long int *upper, long long int *lower);",
    "int mixedPart(long long int *upper, long long int *lower);",
    "",
    "void exec() {",
    "  char opCode;",
    "  char buf1[20], buf2[20];",
    "",
    "  int upperA, lowerA, upperB, lowerB;",
    "  long long int lower, upper;",
    "",
    "  scanf(\"%s\", &buf1);",
    "  getchar();",
    "  ",
    "  scanf(\"%c\", &opCode);",
    "  getchar();",
    "",
    "  scanf(\"%s\", &buf2);",
    "  getchar();",
    "",
    "  parseFrac(&buf1, &upperA, &lowerA);",
    "  parseFrac(&buf2, &upperB, &lowerB);",
    "",
    "  if (lowerA * lowerB == 0) {",
    "    printf(\"Error\\n\");",
    "    return ;",
    "  }",
    "",
    "  switch (opCode) {",
    "    case '+':",
    "      upper = upperA * lowerB + upperB * lowerA;",
    "      lower = lowerA * lowerB;",
    "      break;",
    "    ",
    "    case '-':",
    "      upper = upperA * lowerB - upperB * lowerA;",
    "      lower = lowerA * lowerB;",
    "      break;",
    "    ",
    "    case '*':",
    "      upper = upperA * upperB;",
    "      lower = lowerA * lowerB;",
    "      break;",
    "",
    "    case '/':",
    "      upper = upperA * lowerB;",
    "      lower = lowerA * upperB;",
    "      break;",
    "  }",
    "",
    "  short isNeg = (upper < 0) ^ (lower < 0);",
    "",
    "  // Calibrate the upper part if lower part is negative ",
    "  upper *= (upper < 0) ? -1 : 1;",
    "  lower *= (lower < 0) ? -1 : 1;",
    "",
    "  if (lower == 0) {",
    "    printf(\"Error\\n\");",
    "    return;",
    "  }",
    "",
    "  int mixed = mixedPart(&upper, &lower);",
    "  ",
    "  simplify(&upper, &lower);",
    "",
    "  if (upper == 0 && mixed == 0) {",
    "    printf(\"0\\n\");",
    "    return;",
    "  }",
    "",
    "  if (isNeg) printf(\"-\");",
    "  ",
    "  if (mixed != 0 && upper == 0) {",
    "    printf(\"%d\\n\", mixed);",
    "    return;",
    "  }",
    "  ",
    "  if (mixed != 0) {",
    "    printf(\"%d(%d/%d)\\n\", mixed, upper, lower);",
    "    return;",
    "  }",
    "",
    "  printf(\"%d/%d\\n\", upper, lower);",
    "  return;",
    "}",
    "",
    "int main() {",
    "  char response = 'y';",
    "  while (response == 'y') {",
    "    exec();",
    "",
    "    scanf(\"%c\", &response);",
    "    getchar();",
    "  }",
    "  ",
    "}",
    "",
    "int mixedPart(long long int *upper, long long int *lower) {",
    "  int num = *upper / *lower;",
    "",
    "  *upper %= *lower;",
    "  ",
    "  return num;",
    "}",
    "",
    "void simplify(long long int *upper, long long int *lower) {",
    "  long long int target = ( (*upper > *lower) ? *upper : *lower ) / 2;",
    "",
    "  int index = 2;",
    "",
    "  while (index <= target) {",
    "    if (*upper % index == 0 && *lower % index == 0) {",
    "      *upper /= index;",
    "      *lower /= index;",
    "      continue;",
    "    }",
    "",
    "    index ++;",
    "  }",
    "}",
    "",
    "void parseFrac(char (*s)[], int *upper, int *lower) {",
    "  int index = 0;",
    "",
    "  short isNeg;",
    "",
    "  if ( (*s)[0] == '-' ) {",
    "    index ++;",
    "    isNeg = -1;",
    "  } else {",
    "    isNeg = 1;",
    "  }",
    "",
    "  int firstInteger = fetchNumber(s, &index);",
    "",
    "  if ((*s)[index] == '/') {",
    "    *upper = isNeg * firstInteger;",
    "",
    "    index ++;",
    "    *lower = fetchNumber(s, &index);",
    "    return;",
    "  }",
    "",
    "  index ++;",
    "  *upper = fetchNumber(s, &index);",
    "",
    "  index ++;",
    "  *lower = fetchNumber(s, &index);",
    "",
    "  *upper += firstInteger * (*lower);",
    "  *upper *= isNeg;",
    "}",
    "",
    "short isDigit(char s) {",
    "  return s >= '0' && s <= '9';",
    "}",
    "",
    "int fetchNumber(char (*s)[], int *start) {",
    "  int integer = 0;",
    "  while ((*s)[*start] != '\\0') {",
    "    if (!isDigit((*s)[*start])) ",
    "      break;",
    "",
    "    integer = integer * 10 + (*s)[*start] - '0';",
    "    (*start)++;",
    "    continue;",
    "  }",
    "",
    "  return integer;",
    "}",
    "",
    "void readFrac() {",
    "  char buf, negFactor = 1;",
    "",
    "  scanf(\"%c\", &buf);",
    "",
    "  do {",
    "    if (buf == '-') ",
    "      negFactor = -1;",
    "",
    "    ",
    "    scanf(\"%c\", &buf);",
    "  } while (buf != '\\n');",
    "}"
  ]
}