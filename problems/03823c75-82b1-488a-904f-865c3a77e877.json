{
  "uuid": "03823c75-82b1-488a-904f-865c3a77e877",
  "title": "20. 圖形翻轉",
  "createDate": 1750302596248,
  "collections": [
    "9b99bc6a-12d6-4347-87c5-9cc2082e7508"
  ],
  "problem": [
    "給定整數n,m，",
    "輸入一個正整數n決定方陣大小(n×n矩陣)，",
    "如果n超出給定範圍輸出:ERROR，並結束程式，",
    "若n為給定範圍，",
    "再輸入整數m選擇顯示矩陣模式，",
    "若m為0，",
    "輸出0~n×n-1 數字矩陣，",
    "例 n=4:",
    "| 0 | 1 | 2 | 3 |",
    "| - | - | - | - |",
    "| 4 | 5 | 6 | 7 |",
    "| 8 | 9 | 10| 11|",
    "| 12| 13| 14| 15|",
    "若m為1，",
    "輸出0的上下翻轉數字矩陣，",
    "例 n=4:",
    "| 12| 13| 14| 15|",
    "| - | - | - | - |",
    "| 8 | 9 | 10| 11|",
    "| 4 | 5 | 6 | 7 |",
    "| 0 | 1 | 2 | 3 |",
    "若m為2，",
    "輸出0的順時鐘翻轉數字矩陣，",
    "例 n=4:",
    "| 12| 8 | 4 | 0 |",
    "| - | - | - | - |",
    "| 13| 9 | 5 | 1 |",
    "| 14| 10| 6 | 2 |",
    "| 15| 11| 7 | 3 |",
    "若m為-1時跳出結束程式，",
    "若m為範圍外，",
    "輸出ERROR並重新輸入m，",
    "可以無限選擇輸出矩陣模式直到輸入-1跳出結束程式。",
    "注意:矩陣元素輸出大小固定為3。",
    "【輸入說明】",
    "第一行：輸入一個整數n,1<=n<=10",
    "第二行直到輸入-1結束程式：輸入一個整數m,-1<=m<=2",
    "範例輸入說明:",
    "Sample Input:",
    "4(n×n矩陣n)",
    "0(矩陣顯示m)",
    "2(矩陣顯示m)",
    "4(矩陣顯示m)",
    "-1(結束程式)",
    "【輸出說明】",
    "按照題目說明輸出所選擇的矩陣模式或是輸出ERROR",
    "Sample Output:",
    "0 1 2 3 (m為0，輸出0~nxn-1 數字)",
    "4 5 6 7",
    "8 9 10 11",
    "12 13 14 15",
    "12 8 4 0 (m為2，輸出0的順時鐘翻轉數字)",
    "13 9 5 1",
    "14 10 6 2",
    "15 11 7 3",
    "ERROR (m超出範圍，ERROR)"
  ],
  "testcase": {
    "codeType": 0,
    "cases": [
      {
        "input": [
          "0"
        ],
        "output": [
          "ERROR"
        ]
      },
      {
        "input": [
          "12"
        ],
        "output": [
          "ERROR"
        ]
      },
      {
        "input": [
          "4",
          "3",
          "-1"
        ],
        "output": [
          "ERROR"
        ]
      },
      {
        "input": [
          "4",
          "0",
          "2",
          "4",
          "-1"
        ],
        "output": [
          "0 1 2 3",
          "4 5 6 7",
          "8 9 10 11",
          "12 13 14 15",
          "12 8 4 0",
          "13 9 5 1",
          "14 10 6 2",
          "5 11 7 3",
          "ERROR"
        ]
      },
      {
        "input": [
          "9",
          "1",
          "5",
          "2",
          "-1"
        ],
        "output": [
          "72 73 74 75 76 77 78 79 80",
          "63 64 65 66 67 68 69 70 71",
          "54 55 56 57 58 59 60 61 62",
          "45 46 47 48 49 50 51 52 53",
          "36 37 38 39 40 41 42 43 44",
          "27 28 29 30 31 32 33 34 35",
          "18 19 20 21 22 23 24 25 26",
          "9 10 11 12 13 14 15 16 17",
          "0 1 2 3 4 5 6 7 8",
          "ERROR",
          "72 63 54 45 36 27 18 9 0",
          "73 64 55 46 37 28 19 10 1",
          "74 65 56 47 38 29 20 11 2",
          "75 66 57 48 39 30 21 12 3",
          "76 67 58 49 40 31 22 13 4",
          "77 68 59 50 41 32 23 14 5",
          "78 69 60 51 42 33 24 15 6",
          "79 70 61 52 43 34 25 16 7",
          "80 71 62 53 44 35 26 17 8"
        ]
      }
    ]
  },
  "sampleCode": [
    "def main() -> None:",
    "  N = int(input())",
    "",
    "  if N > 10 or N < 1:",
    "    print(\"ERROR\")",
    "    return",
    "",
    "  while True:",
    "    M = int(input())",
    "    if M == -1:",
    "      break",
    "    ",
    "    execM(M, N)",
    "  pass",
    "",
    "def execM(m: int, n: int) -> None:",
    "  if m == 0:",
    "    return mode0(n)",
    "  ",
    "  if m == 1:",
    "    return mode1(n)",
    "  ",
    "  if m == 2:",
    "    return mode2(n)",
    "  ",
    "  return print(\"ERROR\")",
    "",
    "def mode0(n: int):",
    "  for i in range(n*n):",
    "    num = i",
    "    print(\"%3d\"%(num), end=\"\" if i%n != n-1 else None)",
    "",
    "def mode1(n: int):",
    "  for i in range(n*n):",
    "    num = n*(n-i//n-1) + i % n",
    "    print(\"%3d\"%(num), end=\"\" if i%n != n-1 else None)",
    "",
    "def mode2(n: int):",
    "  for i in range(n*n):",
    "    num = n*(n-1-i%n) + i//n",
    "    print(\"%3d\"%(num), end=\"\" if i%n != n-1 else None)",
    "",
    "if __name__ == \"__main__\":",
    "  main()"
  ]
}